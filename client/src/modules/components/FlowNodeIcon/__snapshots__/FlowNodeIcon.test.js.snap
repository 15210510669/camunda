// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FlowNodeIcon flow node state should render active dark icon 1`] = `
<styled.span
  theme="dark"
>
  <Styled(FlowNodeTaskDefault) />
  <Styled(FlowNodeStateOkDark) />
</styled.span>
`;

exports[`FlowNodeIcon flow node state should render active light icon 1`] = `
<styled.span
  theme="light"
>
  <Styled(FlowNodeTaskDefault) />
  <Styled(FlowNodeStateOkLight) />
</styled.span>
`;

exports[`FlowNodeIcon flow node state should render active light icon if it's selected 1`] = `
<styled.span
  theme="dark"
>
  <Styled(FlowNodeTaskDefault) />
  <Styled(FlowNodeStateOkLight) />
</styled.span>
`;

exports[`FlowNodeIcon flow node state should render canceled dark icon 1`] = `
<styled.span
  theme="dark"
>
  <Styled(FlowNodeTaskDefault) />
  <Styled(FlowNodeStateCanceledDark) />
</styled.span>
`;

exports[`FlowNodeIcon flow node state should render canceled light icon 1`] = `
<styled.span
  theme="light"
>
  <Styled(FlowNodeTaskDefault) />
  <Styled(FlowNodeStateCanceledLight) />
</styled.span>
`;

exports[`FlowNodeIcon flow node state should render canceled selected icon 1`] = `
<styled.span
  theme="dark"
>
  <Styled(FlowNodeTaskDefault) />
  <Styled(FlowNodeStateCanceledSelected) />
</styled.span>
`;

exports[`FlowNodeIcon flow node state should render completed dark icon 1`] = `
<styled.span
  theme="dark"
>
  <Styled(FlowNodeTaskDefault) />
  <Styled(FlowNodeStateCompletedDark) />
</styled.span>
`;

exports[`FlowNodeIcon flow node state should render completed light icon 1`] = `
<styled.span
  theme="light"
>
  <Styled(FlowNodeTaskDefault) />
  <Styled(FlowNodeStateCompletedLight) />
</styled.span>
`;

exports[`FlowNodeIcon flow node state should render completed selected icon 1`] = `
<styled.span
  theme="dark"
>
  <Styled(FlowNodeTaskDefault) />
  <Styled(FlowNodeStateCompletedSelected) />
</styled.span>
`;

exports[`FlowNodeIcon flow node state should render incident dark icon 1`] = `
<styled.span
  theme="dark"
>
  <Styled(FlowNodeTaskDefault) />
  <Styled(FlowNodeStateIncidentDark) />
</styled.span>
`;

exports[`FlowNodeIcon flow node state should render incident light icon 1`] = `
<styled.span
  theme="light"
>
  <Styled(FlowNodeTaskDefault) />
  <Styled(FlowNodeStateIncidentLight) />
</styled.span>
`;

exports[`FlowNodeIcon flow node state should render incident light icon if it's selected 1`] = `
<styled.span
  theme="dark"
>
  <Styled(FlowNodeTaskDefault) />
  <Styled(FlowNodeStateIncidentLight) />
</styled.span>
`;

exports[`FlowNodeIcon flow node type should render end event icon 1`] = `
<styled.span
  theme="dark"
>
  <Styled(FlowNodeEndEvent) />
  <Styled(FlowNodeStateOkDark) />
</styled.span>
`;

exports[`FlowNodeIcon flow node type should render exclusive gateway icon 1`] = `
<styled.span
  theme="dark"
>
  <Styled(FlowNodeExclusiveGateway) />
  <Styled(FlowNodeStateOkDark) />
</styled.span>
`;

exports[`FlowNodeIcon flow node type should render exclusive parallel icon 1`] = `
<styled.span
  theme="dark"
>
  <Styled(FlowNodeParallelGateway) />
  <Styled(FlowNodeStateOkDark) />
</styled.span>
`;

exports[`FlowNodeIcon flow node type should render start event icon 1`] = `
<styled.span
  theme="dark"
>
  <Styled(FlowNodeStartEvent) />
  <Styled(FlowNodeStateOkDark) />
</styled.span>
`;

exports[`FlowNodeIcon flow node type should render task icon 1`] = `
<styled.span
  theme="dark"
>
  <Styled(FlowNodeTaskDefault) />
  <Styled(FlowNodeStateOkDark) />
</styled.span>
`;
