// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Pane bottom pane 'should render both ExpandButtons by default 1`] = `
<Styled(Panel)
  expandState="DEFAULT"
  handleExpand={[MockFunction]}
  paneId="BOTTOM"
>
  <CollapsablePanelConsumer>
    <Component />
  </CollapsablePanelConsumer>
  <Foo
    expandState="DEFAULT"
    key=".0"
  />
</Styled(Panel)>
`;

exports[`Pane bottom pane 'should render both ExpandButtons by default 2`] = `
Array [
  <Styled(ExpandButton)
    direction="DOWN"
    onClick={[Function]}
    title="Expand top pane"
  />,
  <Styled(ExpandButton)
    direction="UP"
    onClick={[Function]}
    title="Expand bottom pane"
  />,
]
`;

exports[`Pane bottom pane should render ExpandButton with DOWN icon if pane is expanded' 1`] = `
<Styled(Panel)
  expandState="EXPANDED"
  handleExpand={[MockFunction]}
  paneId="BOTTOM"
>
  <CollapsablePanelConsumer>
    <Component />
  </CollapsablePanelConsumer>
  <Foo
    expandState="EXPANDED"
    key=".0"
  />
</Styled(Panel)>
`;

exports[`Pane bottom pane should render ExpandButton with DOWN icon if pane is expanded' 2`] = `
<Styled(ExpandButton)
  direction="DOWN"
  onClick={[Function]}
  title="Expand top pane"
/>
`;

exports[`Pane bottom pane should render ExpandButton with UP icon if pane is collapsed 1`] = `
<Styled(Panel)
  expandState="COLLAPSED"
  handleExpand={[MockFunction]}
  paneId="BOTTOM"
>
  <CollapsablePanelConsumer>
    <Component />
  </CollapsablePanelConsumer>
  <Foo
    expandState="COLLAPSED"
    key=".0"
  />
</Styled(Panel)>
`;

exports[`Pane bottom pane should render ExpandButton with UP icon if pane is collapsed 2`] = `
<Styled(ExpandButton)
  direction="UP"
  onClick={[Function]}
  title="Expand bottom pane"
/>
`;

exports[`Pane should render children with expandState 1`] = `
<Styled(Panel)
  expandState="EXPANDED"
  handleExpand={[MockFunction]}
  paneId="TOP"
>
  <Foo
    expandState="EXPANDED"
    key=".0"
  />
</Styled(Panel)>
`;

exports[`Pane top pane should not render expand buttons 1`] = `
<Styled(Panel)
  expandState="COLLAPSED"
  handleExpand={[MockFunction]}
  paneId="TOP"
>
  <Foo
    expandState="COLLAPSED"
    key=".0"
  />
</Styled(Panel)>
`;
