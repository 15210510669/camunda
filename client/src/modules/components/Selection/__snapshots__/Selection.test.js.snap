// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Selection should contain Actions 1`] = `
<styled.div
  data-test="actions"
>
  <StyledComponent
    data-test="actions"
    forwardedClass={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": undefined,
        "componentStyle": ComponentStyle {
          "componentId": "sc-iRbamj",
          "isStatic": true,
          "lastClassName": "iXoKIB",
          "rules": Array [
            "
  display: flex;
  align-items: center;
  margin-left: auto;
  margin-right: 24px;
",
          ],
        },
        "displayName": "styled.div",
        "render": [Function],
        "styledComponentId": "sc-iRbamj",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <div
      className="sc-iRbamj iXoKIB"
      data-test="actions"
    >
      <styled.div
        onClick={[Function]}
      >
        <StyledComponent
          forwardedClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": undefined,
              "componentStyle": ComponentStyle {
                "componentId": "sc-jlyJG",
                "isStatic": true,
                "lastClassName": "eZWlEm",
                "rules": Array [
                  "
  display: flex;
  align-items: center;
  position: relative;
  top: 1px;
  height: 26px;
  z-index: 1;
  padding: 0 2px;
  margin-right: 10px;
  border-right: 1px solid ",
                  "rgba(255, 255, 255, 0.15)",
                  ";
",
                ],
              },
              "displayName": "styled.div",
              "render": [Function],
              "styledComponentId": "sc-jlyJG",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          onClick={[Function]}
        >
          <div
            className="sc-jlyJG eZWlEm"
            onClick={[Function]}
          >
            <Dropdown
              aria-label="Batch Operations"
              buttonStyles={
                Array [
                  "
  color: #fff;
",
                ]
              }
              label={<ForwardRef />}
              placement="bottom"
            >
              <styled.div>
                <StyledComponent
                  forwardedClass={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": undefined,
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-fjdhpX",
                        "isStatic": true,
                        "lastClassName": "Yobvn",
                        "rules": Array [
                          "
  position: relative;
  height: 20px;
",
                        ],
                      },
                      "displayName": "styled.div",
                      "render": [Function],
                      "styledComponentId": "sc-fjdhpX",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={[Function]}
                >
                  <div
                    className="sc-fjdhpX Yobvn"
                  >
                    <Themed(styled.button)
                      buttonStyles={
                        Array [
                          "
  color: #fff;
",
                        ]
                      }
                      data-button-open={false}
                      data-test="dropdown-toggle"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                    >
                      <Themed
                        buttonStyles={
                          Array [
                            "
  color: #fff;
",
                          ]
                        }
                        data-button-open={false}
                        data-test="dropdown-toggle"
                        forwardedRef={null}
                        onClick={[Function]}
                        onKeyDown={[Function]}
                      >
                        <styled.button
                          buttonStyles={
                            Array [
                              "
  color: #fff;
",
                            ]
                          }
                          data-button-open={false}
                          data-test="dropdown-toggle"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          theme="dark"
                        >
                          <StyledComponent
                            buttonStyles={
                              Array [
                                "
  color: #fff;
",
                              ]
                            }
                            data-button-open={false}
                            data-test="dropdown-toggle"
                            forwardedClass={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": undefined,
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-jzJRlG",
                                  "isStatic": false,
                                  "lastClassName": "fBbEHG",
                                  "rules": Array [
                                    "
  /* Positioning */
  position: relative;
  display: flex;
  align-items: center;

  /* Display & Box Model */
  border: none;

  /* Color */
  color: ",
                                    [Function],
                                    ";

  background: none;

  /* Text */
  font-family: IBMPlexSans;
  font-size: 15px;
  font-weight: 600;

  /* Other */
  cursor: ",
                                    [Function],
                                    ";

  & > svg {
    vertical-align: text-bottom;
  }

  ",
                                    [Function],
                                    ";
",
                                  ],
                                },
                                "displayName": "styled.button",
                                "render": [Function],
                                "styledComponentId": "sc-jzJRlG",
                                "target": "button",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            theme="dark"
                          >
                            <button
                              className="sc-jzJRlG fBbEHG"
                              data-button-open={false}
                              data-test="dropdown-toggle"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                            >
                              <Styled(ReactComponent)>
                                <StyledComponent
                                  forwardedClass={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": undefined,
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-jhAzac",
                                        "isStatic": true,
                                        "lastClassName": "kKWdrg",
                                        "rules": Array [
                                          "
  color: '#ffffff';
",
                                        ],
                                      },
                                      "displayName": "Styled(ReactComponent)",
                                      "render": [Function],
                                      "styledComponentId": "sc-jhAzac",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                      Symbol(Symbol.hasInstance): [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <ReactComponent
                                    className="sc-jhAzac kKWdrg"
                                  >
                                    <svg
                                      className="sc-jhAzac kKWdrg"
                                    >
                                      batch.svg
                                    </svg>
                                  </ReactComponent>
                                </StyledComponent>
                              </Styled(ReactComponent)>
                              <ReactComponent>
                                <svg>
                                  down.svg
                                </svg>
                              </ReactComponent>
                            </button>
                          </StyledComponent>
                        </styled.button>
                      </Themed>
                    </Themed(styled.button)>
                    <CSSTransition
                      classNames="transition"
                      in={false}
                      mountOnEnter={true}
                      timeout={
                        Object {
                          "enter": 50,
                          "exit": 20,
                        }
                      }
                      unmountOnExit={true}
                    >
                      <Transition
                        appear={false}
                        enter={true}
                        exit={true}
                        in={false}
                        mountOnEnter={true}
                        onEnter={[Function]}
                        onEntered={[Function]}
                        onEntering={[Function]}
                        onExit={[Function]}
                        onExited={[Function]}
                        onExiting={[Function]}
                        timeout={
                          Object {
                            "enter": 50,
                            "exit": 20,
                          }
                        }
                        unmountOnExit={true}
                      />
                    </CSSTransition>
                  </div>
                </StyledComponent>
              </styled.div>
            </Dropdown>
          </div>
        </StyledComponent>
      </styled.div>
      <styled.button
        aria-label="Drop Selection 1"
        onClick={[MockFunction]}
      >
        <StyledComponent
          aria-label="Drop Selection 1"
          forwardedClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": undefined,
              "componentStyle": ComponentStyle {
                "componentId": "sc-gipzik",
                "isStatic": true,
                "lastClassName": "fgoXPl",
                "rules": Array [
                  "
  background: transparent;
  border-radius: 12px;
  width: 16px;
  height: 16px;
  padding: 0px;
  z-index: 3;
",
                ],
              },
              "displayName": "styled.button",
              "render": [Function],
              "styledComponentId": "sc-gipzik",
              "target": "button",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          onClick={[MockFunction]}
        >
          <button
            aria-label="Drop Selection 1"
            className="sc-gipzik fgoXPl"
            onClick={[MockFunction]}
          >
            <Styled(ReactComponent)>
              <StyledComponent
                forwardedClass={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": undefined,
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-csuQGl",
                      "isStatic": true,
                      "lastClassName": "cGuwfi",
                      "rules": Array [
                        "
  opacity: 0.45;
  cursor: pointer;
",
                      ],
                    },
                    "displayName": "Styled(ReactComponent)",
                    "render": [Function],
                    "styledComponentId": "sc-csuQGl",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
              >
                <ReactComponent
                  className="sc-csuQGl cGuwfi"
                >
                  <svg
                    className="sc-csuQGl cGuwfi"
                  >
                    remove-item.svg
                  </svg>
                </ReactComponent>
              </StyledComponent>
            </Styled(ReactComponent)>
          </button>
        </StyledComponent>
      </styled.button>
    </div>
  </StyledComponent>
</styled.div>
`;

exports[`Selection should contain Instances 1`] = `
<ul
  className="sc-eHgmQL kbhExB"
>
  <TransitionGroup
    childFactory={[Function]}
    component={null}
  >
    <Themed(Styled(Transition))
      data-test="addInstanceTransition"
      in={true}
      key=".$0"
      onExited={[Function]}
      timeout={800}
    >
      <Themed
        data-test="addInstanceTransition"
        forwardedRef={null}
        in={true}
        onExited={[Function]}
        timeout={800}
      >
        <Styled(Transition)
          data-test="addInstanceTransition"
          in={true}
          onExited={[Function]}
          theme="dark"
          timeout={800}
        >
          <StyledComponent
            data-test="addInstanceTransition"
            forwardedClass={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": undefined,
                "componentStyle": ComponentStyle {
                  "componentId": "sc-jWBwVP",
                  "isStatic": false,
                  "lastClassName": "TkARq",
                  "rules": Array [
                    "
  &.transition-enter {
    opacity: 0;
  }
  &.transition-enter-active {
    opacity: 1;
    transition: opacity ",
                    [Function],
                    ";
  }
  &.transition-enter-done {
    opacity: 1;
  }
",
                  ],
                },
                "displayName": "Styled(Transition)",
                "render": [Function],
                "styledComponentId": "sc-jWBwVP",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
                Symbol(Symbol.hasInstance): [Function],
              }
            }
            forwardedRef={null}
            in={true}
            onExited={[Function]}
            theme="dark"
            timeout={800}
          >
            <Transition
              className="sc-jWBwVP TkARq"
              data-test="addInstanceTransition"
              in={true}
              onExited={[Function]}
              theme="dark"
              timeout={800}
            >
              <CSSTransition
                className="sc-jWBwVP TkARq"
                classNames="transition"
                data-test="addInstanceTransition"
                in={true}
                onExited={[Function]}
                theme="dark"
                timeout={800}
              >
                <Transition
                  appear={false}
                  className="sc-jWBwVP TkARq"
                  data-test="addInstanceTransition"
                  enter={true}
                  exit={true}
                  in={true}
                  mountOnEnter={false}
                  onEnter={[Function]}
                  onEntered={[Function]}
                  onEntering={[Function]}
                  onExit={[Function]}
                  onExited={[Function]}
                  onExiting={[Function]}
                  theme="dark"
                  timeout={800}
                  unmountOnExit={false}
                >
                  <Themed(styled.li)
                    className="sc-jWBwVP TkARq"
                    data-test="addInstanceTransition"
                    theme="dark"
                  >
                    <Themed
                      className="sc-jWBwVP TkARq"
                      data-test="addInstanceTransition"
                      forwardedRef={null}
                      theme="dark"
                    >
                      <styled.li
                        className="sc-jWBwVP TkARq"
                        data-test="addInstanceTransition"
                        theme="dark"
                      >
                        <StyledComponent
                          className="sc-jWBwVP TkARq"
                          data-test="addInstanceTransition"
                          forwardedClass={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": undefined,
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-fMiknA",
                                "isStatic": false,
                                "lastClassName": "hynlwc",
                                "rules": Array [
                                  "
  display: flex;
  align-items: center;
  height: 31px;

  color: ",
                                  [Function],
                                  ";
  font-size: 13px;
  & * {
    top: 1px;
  }

  & > div {
    padding-left: 10px;
  }

  &:nth-child(even) {
    background: ",
                                  [Function],
                                  ";

    border-bottom: 1px solid ",
                                  [Function],
                                  ";
  }

  &:nth-child(odd) {
    background: ",
                                  [Function],
                                  ";
    border-bottom: 1px solid ",
                                  [Function],
                                  ";
  }
",
                                ],
                              },
                              "displayName": "styled.li",
                              "render": [Function],
                              "styledComponentId": "sc-fMiknA",
                              "target": "li",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          theme="dark"
                        >
                          <li
                            className="sc-jWBwVP TkARq sc-fMiknA hynlwc"
                            data-test="addInstanceTransition"
                          >
                            <styled.div>
                              <StyledComponent
                                forwardedClass={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": undefined,
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-dVhcbM",
                                      "isStatic": true,
                                      "lastClassName": "VKiQB",
                                      "rules": Array [
                                        "
  width: 25px;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "render": [Function],
                                    "styledComponentId": "sc-dVhcbM",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-dVhcbM VKiQB"
                                >
                                  <Themed(StateIcon)
                                    state="ACTIVE"
                                  >
                                    <Themed
                                      forwardedRef={null}
                                      state="ACTIVE"
                                    >
                                      <StateIcon
                                        state="ACTIVE"
                                        theme="dark"
                                      >
                                        <Styled(ReactComponent)
                                          theme="dark"
                                        >
                                          <StyledComponent
                                            forwardedClass={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": undefined,
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bwzfXH",
                                                  "isStatic": true,
                                                  "lastClassName": "cjPJyG",
                                                  "rules": Array [
                                                    "
  ",
                                                    "
  position: relative;
  top: 3px;
  margin-right: 5px;
",
                                                    ";
  color: ",
                                                    "#10d070",
                                                    ";
",
                                                  ],
                                                },
                                                "displayName": "Styled(ReactComponent)",
                                                "render": [Function],
                                                "styledComponentId": "sc-bwzfXH",
                                                "target": [Function],
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                                Symbol(Symbol.hasInstance): [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            theme="dark"
                                          >
                                            <ReactComponent
                                              className="sc-bwzfXH cjPJyG"
                                              theme="dark"
                                            >
                                              <svg
                                                className="sc-bwzfXH cjPJyG"
                                                theme="dark"
                                              >
                                                state-ok.svg
                                              </svg>
                                            </ReactComponent>
                                          </StyledComponent>
                                        </Styled(ReactComponent)>
                                      </StateIcon>
                                    </Themed>
                                  </Themed(StateIcon)>
                                </div>
                              </StyledComponent>
                            </styled.div>
                            <styled.div>
                              <StyledComponent
                                forwardedClass={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": undefined,
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-eqIVtm",
                                      "isStatic": true,
                                      "lastClassName": "isjZyh",
                                      "rules": Array [
                                        "
  width: 50%;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "render": [Function],
                                    "styledComponentId": "sc-eqIVtm",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-eqIVtm isjZyh"
                                >
                                  someWorkflowName
                                </div>
                              </StyledComponent>
                            </styled.div>
                            <styled.div>
                              <StyledComponent
                                forwardedClass={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": undefined,
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-fAjcbJ",
                                      "isStatic": true,
                                      "lastClassName": "ecmkNU",
                                      "rules": Array [
                                        "
  width: 50%;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "render": [Function],
                                    "styledComponentId": "sc-fAjcbJ",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-fAjcbJ ecmkNU"
                                >
                                  id_1
                                </div>
                              </StyledComponent>
                            </styled.div>
                            <styled.div>
                              <StyledComponent
                                forwardedClass={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": undefined,
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-caSCKo",
                                      "isStatic": true,
                                      "lastClassName": "Ttews",
                                      "rules": Array [
                                        "
  width: 185px;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "render": [Function],
                                    "styledComponentId": "sc-caSCKo",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-caSCKo Ttews"
                                >
                                  <Styled(ActionStatus)
                                    instance={
                                      Object {
                                        "activities": Array [
                                          Object {
                                            "activityId": "activityId_0",
                                            "endDate": "2018-10-10T09:20:38.658Z",
                                            "id": "id_0",
                                            "startDate": "2018-10-10T09:20:38.658Z",
                                            "state": "ACTIVE",
                                          },
                                        ],
                                        "bpmnProcessId": "someKey",
                                        "endDate": null,
                                        "id": "id_1",
                                        "operations": Array [
                                          Object {
                                            "endDate": "2018-10-10T09:20:38.661Z",
                                            "errorMessage": "string",
                                            "startDate": "2018-10-10T09:20:38.661Z",
                                            "state": "SENT",
                                            "type": "RESOLVE_INCIDENT",
                                          },
                                        ],
                                        "sequenceFlows": Array [],
                                        "startDate": "2018-06-21",
                                        "state": "ACTIVE",
                                        "workflowId": "2",
                                        "workflowName": "someWorkflowName",
                                        "workflowVersion": 1,
                                      }
                                    }
                                    operationState="SENT"
                                    operationType="RESOLVE_INCIDENT"
                                  >
                                    <StyledComponent
                                      forwardedClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "Spinner": Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "WrappedComponent": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": undefined,
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-dxgOiQ",
                                                "isStatic": false,
                                                "lastClassName": "fnVsKo",
                                                "rules": Array [
                                                  "
  margin: 0 5px;
 border: 3px solid ",
                                                  [Function],
                                                  ";
    border-right-color: transparent;
  }
",
                                                ],
                                              },
                                              "displayName": "Styled(Spinner)",
                                              "render": [Function],
                                              "styledComponentId": "sc-dxgOiQ",
                                              "target": [Function],
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                              Symbol(Symbol.hasInstance): [Function],
                                            },
                                            "displayName": "Themed(Styled(Spinner))",
                                            "render": [Function],
                                          },
                                          "attrs": undefined,
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-gisBJw",
                                            "isStatic": true,
                                            "lastClassName": "bVCdRi",
                                            "rules": Array [
                                              "
  margin-right: 97px;
",
                                            ],
                                          },
                                          "displayName": "Styled(ActionStatus)",
                                          "render": [Function],
                                          "styledComponentId": "sc-gisBJw",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                          Symbol(Symbol.hasInstance): [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      instance={
                                        Object {
                                          "activities": Array [
                                            Object {
                                              "activityId": "activityId_0",
                                              "endDate": "2018-10-10T09:20:38.658Z",
                                              "id": "id_0",
                                              "startDate": "2018-10-10T09:20:38.658Z",
                                              "state": "ACTIVE",
                                            },
                                          ],
                                          "bpmnProcessId": "someKey",
                                          "endDate": null,
                                          "id": "id_1",
                                          "operations": Array [
                                            Object {
                                              "endDate": "2018-10-10T09:20:38.661Z",
                                              "errorMessage": "string",
                                              "startDate": "2018-10-10T09:20:38.661Z",
                                              "state": "SENT",
                                              "type": "RESOLVE_INCIDENT",
                                            },
                                          ],
                                          "sequenceFlows": Array [],
                                          "startDate": "2018-06-21",
                                          "state": "ACTIVE",
                                          "workflowId": "2",
                                          "workflowName": "someWorkflowName",
                                          "workflowVersion": 1,
                                        }
                                      }
                                      operationState="SENT"
                                      operationType="RESOLVE_INCIDENT"
                                    >
                                      <ActionStatus
                                        className="sc-gisBJw bVCdRi"
                                        instance={
                                          Object {
                                            "activities": Array [
                                              Object {
                                                "activityId": "activityId_0",
                                                "endDate": "2018-10-10T09:20:38.658Z",
                                                "id": "id_0",
                                                "startDate": "2018-10-10T09:20:38.658Z",
                                                "state": "ACTIVE",
                                              },
                                            ],
                                            "bpmnProcessId": "someKey",
                                            "endDate": null,
                                            "id": "id_1",
                                            "operations": Array [
                                              Object {
                                                "endDate": "2018-10-10T09:20:38.661Z",
                                                "errorMessage": "string",
                                                "startDate": "2018-10-10T09:20:38.661Z",
                                                "state": "SENT",
                                                "type": "RESOLVE_INCIDENT",
                                              },
                                            ],
                                            "sequenceFlows": Array [],
                                            "startDate": "2018-06-21",
                                            "state": "ACTIVE",
                                            "workflowId": "2",
                                            "workflowName": "someWorkflowName",
                                            "workflowVersion": 1,
                                          }
                                        }
                                        operationState="SENT"
                                        operationType="RESOLVE_INCIDENT"
                                      >
                                        <Themed(Styled(Spinner))
                                          className="sc-gisBJw bVCdRi"
                                          title="Instance id_1 has scheduled Operations"
                                        >
                                          <Themed
                                            className="sc-gisBJw bVCdRi"
                                            forwardedRef={null}
                                            title="Instance id_1 has scheduled Operations"
                                          >
                                            <Styled(Spinner)
                                              className="sc-gisBJw bVCdRi"
                                              theme="dark"
                                              title="Instance id_1 has scheduled Operations"
                                            >
                                              <StyledComponent
                                                className="sc-gisBJw bVCdRi"
                                                forwardedClass={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": undefined,
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-dxgOiQ",
                                                      "isStatic": false,
                                                      "lastClassName": "fnVsKo",
                                                      "rules": Array [
                                                        "
  margin: 0 5px;
 border: 3px solid ",
                                                        [Function],
                                                        ";
    border-right-color: transparent;
  }
",
                                                      ],
                                                    },
                                                    "displayName": "Styled(Spinner)",
                                                    "render": [Function],
                                                    "styledComponentId": "sc-dxgOiQ",
                                                    "target": [Function],
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                    Symbol(Symbol.hasInstance): [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                theme="dark"
                                                title="Instance id_1 has scheduled Operations"
                                              >
                                                <Spinner
                                                  className="sc-gisBJw bVCdRi sc-dxgOiQ fnVsKo"
                                                  theme="dark"
                                                  title="Instance id_1 has scheduled Operations"
                                                >
                                                  <Themed(styled.div)
                                                    className="sc-gisBJw bVCdRi sc-dxgOiQ fnVsKo"
                                                    theme="dark"
                                                    title="Instance id_1 has scheduled Operations"
                                                  >
                                                    <Themed
                                                      className="sc-gisBJw bVCdRi sc-dxgOiQ fnVsKo"
                                                      forwardedRef={null}
                                                      theme="dark"
                                                      title="Instance id_1 has scheduled Operations"
                                                    >
                                                      <styled.div
                                                        className="sc-gisBJw bVCdRi sc-dxgOiQ fnVsKo"
                                                        theme="dark"
                                                        title="Instance id_1 has scheduled Operations"
                                                      >
                                                        <StyledComponent
                                                          className="sc-gisBJw bVCdRi sc-dxgOiQ fnVsKo"
                                                          forwardedClass={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": undefined,
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-kpOJdX",
                                                                "isStatic": false,
                                                                "lastClassName": "uWbJd",
                                                                "rules": Array [
                                                                  "
  border-radius: 50%;

  // intentionally sized based on the parent's font-size
  width: 1em;
  height: 1em;

  position: relative;

  border: 3px solid
    ",
                                                                  [Function],
                                                                  ";
  border-right-color: transparent;

  animation: ",
                                                                  Keyframes {
                                                                    "id": "sc-keyframes-iECmZH",
                                                                    "inject": [Function],
                                                                    "name": "iECmZH",
                                                                    "rules": Array [
                                                                      "@-webkit-keyframes iECmZH{0%{-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);transform:rotate(0deg);}100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}",
                                                                      "@keyframes iECmZH{0%{-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);transform:rotate(0deg);}100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}",
                                                                    ],
                                                                    "toString": [Function],
                                                                  },
                                                                  " 0.65s infinite linear;
",
                                                                ],
                                                              },
                                                              "displayName": "styled.div",
                                                              "render": [Function],
                                                              "styledComponentId": "sc-kpOJdX",
                                                              "target": "div",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                          theme="dark"
                                                          title="Instance id_1 has scheduled Operations"
                                                        >
                                                          <div
                                                            className="sc-gisBJw bVCdRi sc-dxgOiQ fnVsKo sc-kpOJdX uWbJd"
                                                            title="Instance id_1 has scheduled Operations"
                                                          />
                                                        </StyledComponent>
                                                      </styled.div>
                                                    </Themed>
                                                  </Themed(styled.div)>
                                                </Spinner>
                                              </StyledComponent>
                                            </Styled(Spinner)>
                                          </Themed>
                                        </Themed(Styled(Spinner))>
                                      </ActionStatus>
                                    </StyledComponent>
                                  </Styled(ActionStatus)>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </li>
                        </StyledComponent>
                      </styled.li>
                    </Themed>
                  </Themed(styled.li)>
                </Transition>
              </CSSTransition>
            </Transition>
          </StyledComponent>
        </Styled(Transition)>
      </Themed>
    </Themed(Styled(Transition))>
  </TransitionGroup>
</ul>
`;

exports[`Selection should contain a Footer 1`] = `
<styled.footer>
  <StyledComponent
    forwardedClass={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": undefined,
        "componentStyle": ComponentStyle {
          "componentId": "sc-kjoXOD",
          "isStatic": true,
          "lastClassName": "gUVUvT",
          "rules": Array [
            "
  display: flex;
  justify-content: flex-end;
  align-items: center;
  height: 32px;
  padding: 8px 21px 7px 0;
  color: #ffffff;
  background: ",
            "#4d90ff",
            ";
  border-radius: 0 0 0 3px;
  border-width: 1px 0 1px 1px;
  border-style: solid;
  border-color: #659fff;
",
          ],
        },
        "displayName": "styled.footer",
        "render": [Function],
        "styledComponentId": "sc-kjoXOD",
        "target": "footer",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <footer
      className="sc-kjoXOD gUVUvT"
    >
      <styled.div>
        <StyledComponent
          forwardedClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": undefined,
              "componentStyle": ComponentStyle {
                "componentId": "sc-cHGsZl",
                "isStatic": true,
                "lastClassName": "idKlIl",
                "rules": Array [
                  "
  font-size: 13px;
",
                ],
              },
              "displayName": "styled.div",
              "render": [Function],
              "styledComponentId": "sc-cHGsZl",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="sc-cHGsZl idKlIl"
          >
            144 more Instances
          </div>
        </StyledComponent>
      </styled.div>
    </footer>
  </StyledComponent>
</styled.footer>
`;
