// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EmptyPanel should display a skeleton 1`] = `
<EmptyPanel
  Skeleton={<div />}
  label="someLabel"
  type="info"
>
  <Themed(styled.div)>
    <Themed
      forwardedRef={
        Object {
          "current": <div
            class="sc-bdVaJa imdMaR"
          >
            <div
              class="sc-bwzfXH kbFnXb"
            >
              <span
                class="sc-htpNat heVysk"
                type="info"
              >
                someLabel
              </span>
            </div>
          </div>,
        }
      }
    >
      <styled.div
        theme="dark"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bdVaJa",
                "isStatic": false,
                "lastClassName": "imdMaR",
                "rules": Array [
                  "
  height: 100%;
  width: 100%;

  /* border-width: 1px; */
  /* border-style: solid; */
  /* border-color: ",
                  [Function],
                  "; */
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bdVaJa",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": <div
                class="sc-bdVaJa imdMaR"
              >
                <div
                  class="sc-bwzfXH kbFnXb"
                >
                  <span
                    class="sc-htpNat heVysk"
                    type="info"
                  >
                    someLabel
                  </span>
                </div>
              </div>,
            }
          }
          theme="dark"
        >
          <div
            className="sc-bdVaJa imdMaR"
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bwzfXH",
                      "isStatic": false,
                      "lastClassName": "kbFnXb",
                      "rules": Array [
                        "
  display: flex;
  align-items: center;
  justify-content: center;
  height: 58%;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bwzfXH",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-bwzfXH kbFnXb"
                >
                  <Themed(styled.span)
                    type="info"
                  >
                    <Themed
                      forwardedRef={null}
                      type="info"
                    >
                      <styled.span
                        theme="dark"
                        type="info"
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "heVysk",
                                "rules": Array [
                                  "
  ",
                                  [Function],
                                  "

  font-family: IBMPlexSans;
  font-size: 16px;
  padding-top: 5px;
",
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          theme="dark"
                          type="info"
                        >
                          <span
                            className="sc-htpNat heVysk"
                            type="info"
                          >
                            someLabel
                          </span>
                        </StyledComponent>
                      </styled.span>
                    </Themed>
                  </Themed(styled.span)>
                </div>
              </StyledComponent>
            </styled.div>
          </div>
        </StyledComponent>
      </styled.div>
    </Themed>
  </Themed(styled.div)>
</EmptyPanel>
`;

exports[`EmptyPanel should display a success message 1`] = `
<EmptyPanel
  label="someLabel"
  type="info"
>
  <Themed(styled.div)>
    <Themed
      forwardedRef={
        Object {
          "current": <div
            class="sc-bdVaJa imdMaR"
          >
            <div
              class="sc-bwzfXH kbFnXb"
            >
              <span
                class="sc-htpNat heVysk"
                type="info"
              >
                someLabel
              </span>
            </div>
          </div>,
        }
      }
    >
      <styled.div
        theme="dark"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bdVaJa",
                "isStatic": false,
                "lastClassName": "imdMaR",
                "rules": Array [
                  "
  height: 100%;
  width: 100%;

  /* border-width: 1px; */
  /* border-style: solid; */
  /* border-color: ",
                  [Function],
                  "; */
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bdVaJa",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": <div
                class="sc-bdVaJa imdMaR"
              >
                <div
                  class="sc-bwzfXH kbFnXb"
                >
                  <span
                    class="sc-htpNat heVysk"
                    type="info"
                  >
                    someLabel
                  </span>
                </div>
              </div>,
            }
          }
          theme="dark"
        >
          <div
            className="sc-bdVaJa imdMaR"
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bwzfXH",
                      "isStatic": false,
                      "lastClassName": "kbFnXb",
                      "rules": Array [
                        "
  display: flex;
  align-items: center;
  justify-content: center;
  height: 58%;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bwzfXH",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-bwzfXH kbFnXb"
                >
                  <Themed(styled.span)
                    type="info"
                  >
                    <Themed
                      forwardedRef={null}
                      type="info"
                    >
                      <styled.span
                        theme="dark"
                        type="info"
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "heVysk",
                                "rules": Array [
                                  "
  ",
                                  [Function],
                                  "

  font-family: IBMPlexSans;
  font-size: 16px;
  padding-top: 5px;
",
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          theme="dark"
                          type="info"
                        >
                          <span
                            className="sc-htpNat heVysk"
                            type="info"
                          >
                            someLabel
                          </span>
                        </StyledComponent>
                      </styled.span>
                    </Themed>
                  </Themed(styled.span)>
                </div>
              </StyledComponent>
            </styled.div>
          </div>
        </StyledComponent>
      </styled.div>
    </Themed>
  </Themed(styled.div)>
</EmptyPanel>
`;

exports[`EmptyPanel should display a warning message 1`] = `
<EmptyPanel
  label="someLabel"
  type="warning"
>
  <Themed(styled.div)>
    <Themed
      forwardedRef={
        Object {
          "current": <div
            class="sc-bdVaJa imdMaR"
          >
            <div
              class="sc-bwzfXH kbFnXb"
            >
              <svg
                class="sc-ifAKCX cZHWPV"
              >
                warning-message-icon.svg
              </svg>
              <span
                class="sc-htpNat hlJWtx"
                type="warning"
              >
                someLabel
              </span>
            </div>
          </div>,
        }
      }
    >
      <styled.div
        theme="dark"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bdVaJa",
                "isStatic": false,
                "lastClassName": "imdMaR",
                "rules": Array [
                  "
  height: 100%;
  width: 100%;

  /* border-width: 1px; */
  /* border-style: solid; */
  /* border-color: ",
                  [Function],
                  "; */
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bdVaJa",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={
            Object {
              "current": <div
                class="sc-bdVaJa imdMaR"
              >
                <div
                  class="sc-bwzfXH kbFnXb"
                >
                  <svg
                    class="sc-ifAKCX cZHWPV"
                  >
                    warning-message-icon.svg
                  </svg>
                  <span
                    class="sc-htpNat hlJWtx"
                    type="warning"
                  >
                    someLabel
                  </span>
                </div>
              </div>,
            }
          }
          theme="dark"
        >
          <div
            className="sc-bdVaJa imdMaR"
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bwzfXH",
                      "isStatic": false,
                      "lastClassName": "kbFnXb",
                      "rules": Array [
                        "
  display: flex;
  align-items: center;
  justify-content: center;
  height: 58%;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bwzfXH",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-bwzfXH kbFnXb"
                >
                  <Styled(ReactComponent)>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-ifAKCX",
                            "isStatic": false,
                            "lastClassName": "cZHWPV",
                            "rules": Array [
                              "
  width: 20px;
  height: 18px;
  fill: ",
                              "#ff3d3d",
                              ";
  margin-right: 15px;
",
                            ],
                          },
                          "displayName": "Styled(ReactComponent)",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-ifAKCX",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                          Symbol(Symbol.hasInstance): [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <ReactComponent
                        className="sc-ifAKCX cZHWPV"
                      >
                        <svg
                          className="sc-ifAKCX cZHWPV"
                        >
                          warning-message-icon.svg
                        </svg>
                      </ReactComponent>
                    </StyledComponent>
                  </Styled(ReactComponent)>
                  <Themed(styled.span)
                    type="warning"
                  >
                    <Themed
                      forwardedRef={null}
                      type="warning"
                    >
                      <styled.span
                        theme="dark"
                        type="warning"
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "hlJWtx",
                                "rules": Array [
                                  "
  ",
                                  [Function],
                                  "

  font-family: IBMPlexSans;
  font-size: 16px;
  padding-top: 5px;
",
                                ],
                              },
                              "displayName": "styled.span",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "span",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          theme="dark"
                          type="warning"
                        >
                          <span
                            className="sc-htpNat hlJWtx"
                            type="warning"
                          >
                            someLabel
                          </span>
                        </StyledComponent>
                      </styled.span>
                    </Themed>
                  </Themed(styled.span)>
                </div>
              </StyledComponent>
            </styled.div>
          </div>
        </StyledComponent>
      </styled.div>
    </Themed>
  </Themed(styled.div)>
</EmptyPanel>
`;
