// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should hide add button and edit menu when in readOnly mode 1`] = `
<div
  className="UserList"
>
  <EntityList
    action={false}
    data={
      Array [
        Object {
          "actions": false,
          "className": "user",
          "icon": "user",
          "meta": Array [
            false,
            "Manager",
          ],
          "name": "kermit",
          "type": "User",
          "warning": "Some data may be hidden from users due to missing authorizations.",
        },
        Object {
          "actions": false,
          "className": "group",
          "icon": "user-group",
          "meta": Array [
            <React.Fragment>
              2
               
              Users
            </React.Fragment>,
            "Manager",
          ],
          "name": "sales",
          "type": "User Group",
          "warning": false,
        },
      ]
    }
    empty="No results found"
    isLoading={false}
    name="Users and User Groups"
  />
  <DeleterErrorHandler
    deleteEntity={[Function]}
    deleteText="Remove"
    descriptionText="The '' null will be removed from the Collection."
    entity={null}
    onClose={[Function]}
    onDelete={[Function]}
    type={null}
  />
  <AddUserModal
    existingUsers={
      Array [
        Object {
          "hasFullScopeAuthorizations": false,
          "id": "USER:kermit",
          "identity": Object {
            "id": "kermit",
            "type": "user",
          },
          "role": "manager",
        },
        Object {
          "id": "GROUP:sales",
          "identity": Object {
            "id": "sales",
            "memberCount": 2,
            "type": "group",
          },
          "role": "manager",
        },
      ]
    }
    onClose={[Function]}
    onConfirm={[Function]}
    open={false}
  />
</div>
`;

exports[`should match snapshot 1`] = `
<div
  className="UserList"
>
  <EntityList
    action={
      <ForwardRef(Button)
        onClick={[Function]}
        primary={true}
      >
        Add
      </ForwardRef(Button)>
    }
    data={
      Array [
        Object {
          "actions": Array [
            Object {
              "action": [Function],
              "icon": "edit",
              "text": "Edit",
            },
            Object {
              "action": [Function],
              "icon": "delete",
              "text": "Remove",
            },
          ],
          "className": "user",
          "icon": "user",
          "meta": Array [
            false,
            "Manager",
          ],
          "name": "kermit",
          "type": "User",
          "warning": "Some data may be hidden from users due to missing authorizations.",
        },
        Object {
          "actions": Array [
            Object {
              "action": [Function],
              "icon": "edit",
              "text": "Edit",
            },
            Object {
              "action": [Function],
              "icon": "delete",
              "text": "Remove",
            },
          ],
          "className": "group",
          "icon": "user-group",
          "meta": Array [
            <React.Fragment>
              2
               
              Users
            </React.Fragment>,
            "Manager",
          ],
          "name": "sales",
          "type": "User Group",
          "warning": false,
        },
      ]
    }
    empty="No results found"
    isLoading={false}
    name="Users and User Groups"
  />
  <DeleterErrorHandler
    deleteEntity={[Function]}
    deleteText="Remove"
    descriptionText="The '' null will be removed from the Collection."
    entity={null}
    onClose={[Function]}
    onDelete={[Function]}
    type={null}
  />
  <AddUserModal
    existingUsers={
      Array [
        Object {
          "hasFullScopeAuthorizations": false,
          "id": "USER:kermit",
          "identity": Object {
            "id": "kermit",
            "type": "user",
          },
          "role": "manager",
        },
        Object {
          "id": "GROUP:sales",
          "identity": Object {
            "id": "sales",
            "memberCount": 2,
            "type": "group",
          },
          "role": "manager",
        },
      ]
    }
    onClose={[Function]}
    onConfirm={[Function]}
    open={false}
  />
</div>
`;
