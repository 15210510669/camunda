// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should match snapshot 1`] = `
<div
  className="EventTable"
>
  <Table
    body={
      Array [
        Object {
          "content": Array [
            <TableSelectRow
              ariaLabel="OrderProcessed"
              checked={true}
              disabled={false}
              id="OrderProcessed"
              name="OrderProcessed"
              onSelect={[Function]}
            />,
            <Select
              onChange={[Function]}
              value="end"
            >
              <Option
                disabled={false}
                value="end"
              >
                End
              </Option>
              <Option
                disabled={false}
                value="start"
              >
                Start
              </Option>
            </Select>,
            "Order Processed",
            "eventGroup",
            "order-service",
            10,
          ],
          "props": Object {
            "className": "OrderProcessed mapped",
            "onClick": [Function],
          },
        },
        Object {
          "content": Array [
            <TableSelectRow
              ariaLabel="OrderAccepted"
              checked={false}
              disabled={true}
              id="OrderAccepted"
              name="OrderAccepted"
              onSelect={[Function]}
            />,
            <span
              className="disabled"
            >
              --
            </span>,
            "Order Accepted",
            "eventGroup",
            "order-service",
            "--",
          ],
          "props": Object {
            "className": "OrderAccepted disabled",
            "onClick": [Function],
          },
        },
      ]
    }
    className=""
    disablePagination={true}
    head={
      Array [
        Object {
          "id": "checked",
          "label": "checked",
          "sortable": false,
        },
        Object {
          "id": "mapping",
          "label": "Mapped asâ€¦",
          "sortable": false,
        },
        Object {
          "id": "eventName",
          "label": "Event Name",
        },
        Object {
          "id": "group",
          "label": "Group",
        },
        Object {
          "id": "source",
          "label": "Source",
        },
        Object {
          "id": "count",
          "label": "Count",
        },
      ]
    }
    noData={
      <React.Fragment>
        
        No Events available.
      </React.Fragment>
    }
    noHighlight={true}
    size="md"
    sorting={
      Object {
        "by": "group",
        "order": "asc",
      }
    }
    toolbar={
      <TableToolbar
        aria-label="data table toolbar"
      >
        <TableToolbarContent>
          <b>
            Events List
          </b>
          <Switch
            checked={true}
            label="Show suggested Events"
            onChange={[Function]}
          />
          <EventSources
            sources={
              Array [
                Object {
                  "configuration": Object {
                    "includeAllGroups": true,
                  },
                  "type": "external",
                },
              ]
            }
          />
          <TableToolbarSearch
            expanded={true}
            onChange={[Function]}
            onClear={[Function]}
            persistent={false}
            placeholder="Search for name..."
            tabIndex="0"
            translateWithId={[Function]}
            value=""
          />
        </TableToolbarContent>
        <Button
          className="collapseButton"
          hasIconOnly={true}
          kind="ghost"
          label="Collapse"
          onClick={[Function]}
        >
          <ForwardRef(ChevronDown) />
        </Button>
      </TableToolbar>
    }
    updateSorting={[Function]}
  />
</div>
`;
