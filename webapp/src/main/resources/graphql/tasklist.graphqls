type Task {
    # the unique identifier of the task
    id: ID!
    name: String!
    workflowName: String!
    creationTime: String!
    completionTime: String
    assignee: User
    variables: [Variable!]
    taskState: TaskState!
}

input TaskQuery {
    state: TaskState
    assigned: Boolean
    assignee: String
}

enum TaskState {
    CREATED,
    COMPLETED
}

type Variable {
    name: String!
    value: String!
}

input VariableInput {
    name: String!
    value: String!
}

type User {
    username: ID!
    firstname: String
    lastname: String
    canLogout: Boolean
}

type Query {
    # find all tasks
    tasks(query: TaskQuery!): [Task!]!
    # get one task: returns error when task does not exist
    task(id: String!): Task!
    currentUser: User!
}

type Mutation {
    completeTask(taskId: String!, variables: [VariableInput!]!): Boolean!
    claimTask(taskId: String!): Task!				
	unclaimTask(taskId: String!): Task!
}
