/*
 * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH
 * under one or more contributor license agreements. Licensed under a commercial license.
 * You may not use this file except in compliance with the commercial license.
 */

package org.camunda.optimize.service.events.autogeneration;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections4.CollectionUtils;
import org.camunda.bpm.model.bpmn.Bpmn;
import org.camunda.bpm.model.bpmn.BpmnModelInstance;
import org.camunda.bpm.model.bpmn.builder.AbstractBpmnModelElementBuilder;
import org.camunda.bpm.model.bpmn.builder.AbstractFlowNodeBuilder;
import org.camunda.bpm.model.bpmn.builder.ProcessBuilder;
import org.camunda.optimize.dto.optimize.query.event.EventMappingDto;
import org.camunda.optimize.dto.optimize.query.event.EventSourceEntryDto;
import org.camunda.optimize.dto.optimize.query.event.EventSourceType;
import org.camunda.optimize.dto.optimize.query.event.autogeneration.AutogeneratedProcessModelDto;
import org.camunda.optimize.dto.optimize.query.event.autogeneration.CorrelatedInstanceDto;
import org.camunda.optimize.dto.optimize.query.event.autogeneration.CorrelatedTraceDto;
import org.springframework.stereotype.Component;

import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.groupingBy;
import static java.util.stream.Collectors.toMap;

@RequiredArgsConstructor
@Component
@Slf4j
public class AutogeneratedProcessModelService {

  private static final String AUTOGENERATED_PROCESS_ID = "AutogeneratedProcessId";

  private final ExternalEventModelBuilderService externalEventModelBuilderService;
  private final CamundaEventModelBuilderService camundaEventModelBuilderService;
  private final CorrelatedInstanceService correlatedInstanceService;

  public AutogeneratedProcessModelDto generateModelFromEventSources(List<EventSourceEntryDto> eventSources) {
    List<EventSourceEntryDto> orderedEventSources = sortEventSourcesForModelOrder(eventSources);
    ProcessBuilder diagramBuilder = Bpmn.createProcess(AUTOGENERATED_PROCESS_ID);
    Map<String, EventMappingDto> mappings = new HashMap<>();
    AbstractFlowNodeBuilder<?, ?> generatedModelBuilder = null;
    for (EventSourceEntryDto source : orderedEventSources) {
      if (EventSourceType.EXTERNAL.equals(source.getType())) {
        generatedModelBuilder = externalEventModelBuilderService.createOrExtendModelWithExternalEventSource(
          diagramBuilder,
          generatedModelBuilder,
          mappings,
          isFinalSourceInSeries(source, orderedEventSources)
        );
      } else {
        generatedModelBuilder = camundaEventModelBuilderService.createOrExtendModelWithEventSource(
          diagramBuilder,
          generatedModelBuilder,
          mappings,
          source,
          isFinalSourceInSeries(source, orderedEventSources)
        );
      }
    }

    final BpmnModelInstance modelInstance = Optional.ofNullable(generatedModelBuilder)
      .map(AbstractBpmnModelElementBuilder::done)
      .orElse(diagramBuilder.done());
    return AutogeneratedProcessModelDto.builder()
      .xml(Bpmn.convertToString(modelInstance))
      .mappings(mappings)
      .build();
  }

  private List<EventSourceEntryDto> sortEventSourcesForModelOrder(final List<EventSourceEntryDto> eventSources) {
    if (eventSources.size() <= 1) {
      return eventSources;
    }
    final Map<EventSourceType, List<EventSourceEntryDto>> sourceByType = eventSources.stream()
      .collect(groupingBy(EventSourceEntryDto::getType));
    final Map<String, EventSourceEntryDto> defKeyToSourceMap = eventSources.stream()
      .collect(toMap(EventSourceEntryDto::getProcessDefinitionKey, Function.identity()));
    final List<String> sampleCorrelationValuesForSources = getSampleCorrelationValuesForSources(sourceByType);

    List<CorrelatedTraceDto> correlatedTraces = correlatedInstanceService.getCorrelatedTracesForEventSources(
      sourceByType.get(EventSourceType.CAMUNDA),
      sampleCorrelationValuesForSources
    );

    // We first set the ordered sources to be the same as the trace we have found that contains most sources
    final List<EventSourceEntryDto> orderedEventSources = new ArrayList<>();
    orderedEventSources.addAll(
      correlatedTraces
        .stream()
        .max(Comparator.comparing(trace -> trace.getInstances().size()))
        .map(trace -> trace.getInstances()
          .stream()
          .map(instance -> defKeyToSourceMap.get(instance.getProcessDefinitionKey()))
          .collect(Collectors.toList())).orElse(Collections.emptyList()));
    log.debug(
      "Trace found containing all following sources for definition keys in order: {}",
      orderedEventSources.stream().map(EventSourceEntryDto::getProcessDefinitionKey).collect(Collectors.toList())
    );

    // Then we check which sources are not yet included in our ordered trace and try to place them individually based on
    // our found traces by placing them before/after a source that they appear in a trace with
    List<String> keysForPlacedSources = orderedEventSources.stream()
      .map(EventSourceEntryDto::getProcessDefinitionKey)
      .collect(Collectors.toList());
    for (EventSourceEntryDto unplacedSource : findUnplacedSources(eventSources, orderedEventSources)) {
      tryToAddUnplacedSourceInOrderedSources(
        defKeyToSourceMap,
        correlatedTraces,
        orderedEventSources,
        keysForPlacedSources,
        unplacedSource
      );
    }
    // Anything that is still unplaced gets placed at the end of the ordered traces
    orderedEventSources.addAll(findUnplacedSources(eventSources, orderedEventSources));
    return orderedEventSources;
  }

  private void tryToAddUnplacedSourceInOrderedSources(final Map<String, EventSourceEntryDto> defKeyToSourceMap,
                                                      final List<CorrelatedTraceDto> correlatedTrace,
                                                      final List<EventSourceEntryDto> orderedEventSources,
                                                      final List<String> keysForPlacedSources,
                                                      final EventSourceEntryDto unplacedSource) {
    log.debug(
      "Attempting to add source of type {} and definition key to ordered trace: {}",
      unplacedSource.getType(),
      unplacedSource.getProcessDefinitionKey()
    );
    final List<CorrelatedInstanceDto> correlatedInstancesForCorrelatedTrace =
      findCorrelatedInstancesContainingUnplacedSourceAndAtLeastOnePlaced(
        correlatedTrace,
        keysForPlacedSources,
        unplacedSource
      );
    // If there is a trace containing the unplaced source that also contains sources that have been placed
    if (correlatedInstancesForCorrelatedTrace.size() > 1) {
      final Optional<CorrelatedInstanceDto> instanceForUnplacedSource =
        correlatedInstancesForCorrelatedTrace
          .stream()
          .filter(instance -> instance.getProcessDefinitionKey().equals(unplacedSource.getProcessDefinitionKey()))
          .findFirst();
      final CorrelatedInstanceDto unplacedSourceInstance =
        instanceForUnplacedSource.orElseThrow(() -> new IllegalStateException(
          "Can't place source as instance not found in trace"));
      final int unplacedSourceIndex = correlatedInstancesForCorrelatedTrace.indexOf(unplacedSourceInstance);
      // If the unplaced source is at the start of the trace
      if (unplacedSourceIndex == 0) {
        // Then we get the following source that we know to already be placed
        final EventSourceEntryDto placedSource = defKeyToSourceMap.get(
          correlatedInstancesForCorrelatedTrace.get(unplacedSourceIndex + 1).getProcessDefinitionKey());
        // And place the unplaced source at its index, before the existing placed source
        log.debug(
          "Adding source with key {} to ordered trace before key {}",
          unplacedSource.getProcessDefinitionKey(),
          placedSource.getProcessDefinitionKey()
        );
        orderedEventSources.add(orderedEventSources.indexOf(placedSource), unplacedSource);
        // If the unplaced source is at the end of the trace
      } else if (unplacedSourceIndex == correlatedInstancesForCorrelatedTrace.size() - 1) {
        // Then we get the previous source that we know to already be placed
        final EventSourceEntryDto placedSource = defKeyToSourceMap.get(
          correlatedInstancesForCorrelatedTrace.get(unplacedSourceIndex - 1).getProcessDefinitionKey());
        // And place the unplaced source after the existing placed source
        log.debug(
          "Adding source with key {} to ordered trace after key {}",
          unplacedSource.getProcessDefinitionKey(),
          placedSource.getProcessDefinitionKey()
        );
        orderedEventSources.add(orderedEventSources.indexOf(placedSource) + 1, unplacedSource);
        // Otherwise, we place it adjacent to the nearest already placed source based on process start time
      } else {
        final CorrelatedInstanceDto instanceForPreviousSource =
          correlatedInstancesForCorrelatedTrace.get(unplacedSourceIndex - 1);
        final long timeBetweenPreviousAndUnplaced = instanceForPreviousSource.getStartDate()
          .until(unplacedSourceInstance.getStartDate(), ChronoUnit.MILLIS);
        final CorrelatedInstanceDto instanceForNextSource =
          correlatedInstancesForCorrelatedTrace.get(unplacedSourceIndex + 1);
        final long timeBetweenUnplacedAndNext = unplacedSourceInstance.getStartDate()
          .until(instanceForNextSource.getStartDate(), ChronoUnit.MILLIS);
        // If the unplaced source is nearer in this instance to its previous source, we place it directly after
        if (timeBetweenPreviousAndUnplaced < timeBetweenUnplacedAndNext) {
          final EventSourceEntryDto previousSource =
            defKeyToSourceMap.get(instanceForPreviousSource.getProcessDefinitionKey());
          log.debug(
            "Adding source with key {} to ordered trace after key {}",
            unplacedSource.getProcessDefinitionKey(),
            previousSource.getProcessDefinitionKey()
          );
          orderedEventSources.add(orderedEventSources.indexOf(previousSource) + 1, unplacedSource);
          // Otherwise, we place it before the next source
        } else {
          final EventSourceEntryDto nextSource =
            defKeyToSourceMap.get(instanceForNextSource.getProcessDefinitionKey());
          log.debug(
            "Adding source with key {} to ordered trace before key {}",
            unplacedSource.getProcessDefinitionKey(),
            nextSource.getProcessDefinitionKey()
          );
          orderedEventSources.add(orderedEventSources.indexOf(nextSource), unplacedSource);
        }
      }
      // We have now placed this source so can add it to our placed keys list to help future placements
      keysForPlacedSources.add(unplacedSource.getProcessDefinitionKey());
    } else {
      log.debug(
        "Not able to find a suitable place for source of type {} and with key {} based on sample traces",
        unplacedSource.getType(),
        unplacedSource.getProcessDefinitionKey()
      );
    }
  }

  private List<CorrelatedInstanceDto> findCorrelatedInstancesContainingUnplacedSourceAndAtLeastOnePlaced(
    final List<CorrelatedTraceDto> correlatedTrace,
    final List<String> keysForPlacedSources,
    final EventSourceEntryDto unplacedSource) {
    return correlatedTrace
      .stream()
      .filter(trace -> trace.getInstances()
        .stream()
        .map(CorrelatedInstanceDto::getProcessDefinitionKey)
        .anyMatch(key -> key.equals(unplacedSource.getProcessDefinitionKey())))
      .map(traceContainingUnplaced ->
             traceContainingUnplaced.getInstances().stream()
               .filter(instance -> keysForPlacedSources.contains(instance.getProcessDefinitionKey()) ||
                 instance.getProcessDefinitionKey().equals(unplacedSource.getProcessDefinitionKey()))
               .collect(Collectors.toList()))
      .max(Comparator.comparing(List::size))
      .orElse(Collections.emptyList());
  }

  private List<EventSourceEntryDto> findUnplacedSources(final List<EventSourceEntryDto> eventSources,
                                                        final List<EventSourceEntryDto> orderedEventSources) {
    return eventSources.stream()
      .filter(source -> !orderedEventSources.contains(source))
      .collect(Collectors.toList());
  }

  private List<String> getSampleCorrelationValuesForSources(final Map<EventSourceType, List<EventSourceEntryDto>> sourcesByType) {
    List<String> correlationValues = new ArrayList<>();
    if (!CollectionUtils.isEmpty(sourcesByType.get(EventSourceType.CAMUNDA))) {
      correlationValues.addAll(
        correlatedInstanceService.getCorrelationValueSampleForEventSources(sourcesByType.get(EventSourceType.CAMUNDA)));
    }
    if (!CollectionUtils.isEmpty(sourcesByType.get(EventSourceType.EXTERNAL))) {
      // TODO OPT-3861
    }
    return correlationValues;
  }

  private boolean isFinalSourceInSeries(final EventSourceEntryDto source, List<EventSourceEntryDto> allSources) {
    return allSources.indexOf(source) == allSources.size() - 1;
  }

}
