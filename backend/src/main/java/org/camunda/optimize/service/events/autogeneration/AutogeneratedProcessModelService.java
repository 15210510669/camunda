/*
 * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH
 * under one or more contributor license agreements. Licensed under a commercial license.
 * You may not use this file except in compliance with the commercial license.
 */

package org.camunda.optimize.service.events.autogeneration;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.camunda.bpm.model.bpmn.Bpmn;
import org.camunda.bpm.model.bpmn.BpmnModelInstance;
import org.camunda.bpm.model.bpmn.builder.AbstractBpmnModelElementBuilder;
import org.camunda.bpm.model.bpmn.builder.AbstractFlowNodeBuilder;
import org.camunda.bpm.model.bpmn.builder.ProcessBuilder;
import org.camunda.optimize.dto.optimize.query.event.AutogeneratedProcessModelDto;
import org.camunda.optimize.dto.optimize.query.event.EventMappingDto;
import org.camunda.optimize.dto.optimize.query.event.EventSourceEntryDto;
import org.camunda.optimize.dto.optimize.query.event.EventSourceType;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@RequiredArgsConstructor
@Component
@Slf4j
public class AutogeneratedProcessModelService {

  private static final String AUTOGENERATED_PROCESS_ID = "AutogeneratedProcessId";

  private final ExternalEventModelBuilderService externalEventModelBuilderService;
  private final CamundaEventModelBuilderService camundaEventModelBuilderService;

  public AutogeneratedProcessModelDto generateModelFromEventSources(List<EventSourceEntryDto> eventSources) {
    ProcessBuilder diagramBuilder = Bpmn.createProcess(AUTOGENERATED_PROCESS_ID);
    Map<String, EventMappingDto> mappings = new HashMap<>();
    AbstractFlowNodeBuilder<?, ?> generatedModelBuilder = null;
    for (EventSourceEntryDto source : eventSources) {
      if (EventSourceType.EXTERNAL.equals(source.getType())) {
        generatedModelBuilder = externalEventModelBuilderService.createOrExtendModelWithExternalEventSource(
          diagramBuilder,
          generatedModelBuilder,
          mappings,
          isFinalSourceInSeries(source, eventSources)
        );
      } else {
        generatedModelBuilder = camundaEventModelBuilderService.createOrExtendModelWithEventSource(
          diagramBuilder,
          generatedModelBuilder,
          mappings,
          source,
          isFinalSourceInSeries(source, eventSources)
        );
      }
    }

    final BpmnModelInstance modelInstance = Optional.ofNullable(generatedModelBuilder)
      .map(AbstractBpmnModelElementBuilder::done)
      .orElse(diagramBuilder.done());
    return AutogeneratedProcessModelDto.builder()
      .xml(Bpmn.convertToString(modelInstance))
      .mappings(mappings)
      .build();
  }

  private boolean isFinalSourceInSeries(final EventSourceEntryDto source, List<EventSourceEntryDto> allSources) {
    return allSources.indexOf(source) == allSources.size() - 1;
  }

}
