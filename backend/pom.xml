<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.camunda.optimize</groupId>
    <artifactId>parent</artifactId>
    <version>2.5.0-SNAPSHOT</version>
  </parent>

  <artifactId>optimize-backend</artifactId>

  <properties>
    <jetty.version>9.4.15.v20190215</jetty.version>
    <jersey.version>2.28</jersey.version>
    <skipTests>false</skipTests>
    <it.test.excludedGroups />
    <env.LIMITS_CPU />

    <skip.unit.tests>${skipTests}</skip.unit.tests>
    <test.argLine>-Xmx2048m</test.argLine>
  </properties>

  <dependencies>

    <!-- Optimize dependencies -->
    <dependency>
      <groupId>org.camunda.optimize</groupId>
      <artifactId>client</artifactId>
      <version>${project.version}</version>
      <type>pom</type>
    </dependency>
    <dependency>
      <groupId>org.camunda.optimize</groupId>
      <artifactId>optimize-commons</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.camunda.optimize</groupId>
      <artifactId>plugin</artifactId>
      <version>${project.version}</version>
    </dependency>

    <!-- Camunda dependencies -->
    <dependency>
      <groupId>org.camunda.bpm.model</groupId>
      <artifactId>camunda-bpmn-model</artifactId>
      <version>${camunda.engine.version}-ee</version>
    </dependency>
    <dependency>
      <groupId>org.camunda.bpm</groupId>
      <artifactId>camunda-license-check</artifactId>
      <version>1.1.0</version>
    </dependency>

    <!-- Javax XML -->
    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
      <version>2.3.1</version>
    </dependency>

    <!-- Spring -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-websocket</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context-support</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-tx</artifactId>
    </dependency>

    <!-- Jetty -->
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-server</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlet</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlets</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty.websocket</groupId>
      <artifactId>websocket-server</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty.websocket</groupId>
      <artifactId>javax-websocket-server-impl</artifactId>
      <version>${jetty.version}</version>
    </dependency>

    <!-- JAX-RS -->
    <dependency>
      <groupId>org.glassfish.jersey.core</groupId>
      <artifactId>jersey-common</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.ext</groupId>
      <artifactId>jersey-bean-validation</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.ext</groupId>
      <artifactId>jersey-entity-filtering</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-json-jackson</artifactId>
      <version>${jersey.version}</version>
      <exclusions>
        <exclusion>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-annotations</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <!-- no spring5 artifact as of when we migrated to spring 5 -->
      <!-- although spring4 may suggests it only works for 4, it works with 5 -->
      <!-- see https://github.com/jersey/jersey/pull/3737 for an eventual spring 5 module  in future -->
      <groupId>org.glassfish.jersey.ext</groupId>
      <artifactId>jersey-spring4</artifactId>
      <version>${jersey.version}</version>
      <exclusions>
        <!-- excludes taken over from spring-boot pom -->
        <exclusion>
          <groupId>org.jvnet</groupId>
          <artifactId>tiger-types</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.glassfish.hk2.external</groupId>
          <artifactId>bean-validator</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.glassfish.hk2.external</groupId>
          <artifactId>javax.inject</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.hibernate</groupId>
          <artifactId>hibernate-validator</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Authentication -->
    <dependency>
      <groupId>com.auth0</groupId>
      <artifactId>java-jwt</artifactId>
      <version>3.7.0</version>
      <exclusions>
        <exclusion>
          <artifactId>jackson-databind</artifactId>
          <groupId>com.fasterxml.jackson.core</groupId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Jackson/JSON -->
    <dependency>
      <groupId>com.fasterxml.jackson.jaxrs</groupId>
      <artifactId>jackson-jaxrs-json-provider</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jdk8</artifactId>
    </dependency>

    <!-- Quartz framework -->
    <dependency>
      <groupId>org.quartz-scheduler</groupId>
      <artifactId>quartz</artifactId>
      <version>${quartz.version}</version>
      <exclusions>
        <exclusion>
          <artifactId>slf4j-api</artifactId>
          <groupId>org.slf4j</groupId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Email framework -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-email</artifactId>
      <version>1.5</version>
    </dependency>

    <!-- CSV -->
    <dependency>
      <groupId>com.opencsv</groupId>
      <artifactId>opencsv</artifactId>
      <version>4.5</version>
    </dependency>

    <!-- Utilities -->
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
    </dependency>
    <dependency>
      <groupId>com.github.ben-manes.caffeine</groupId>
      <artifactId>caffeine</artifactId>
      <version>2.7.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-math3</artifactId>
      <version>3.6.1</version>
    </dependency>

    <!--Test dependencies-->
    <dependency>
      <groupId>org.camunda.bpm.model</groupId>
      <artifactId>camunda-dmn-model</artifactId>
      <version>${camunda.engine.version}-ee</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>pl.pragmatists</groupId>
      <artifactId>JUnitParams</artifactId>
      <version>1.1.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <version>1.4.190</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.6</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpmime</artifactId>
      <version>${httpclient.version}</version>
      <exclusions>
        <exclusion>
          <artifactId>commons-codec</artifactId>
          <groupId>commons-codec</groupId>
        </exclusion>
      </exclusions>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.icegreen</groupId>
      <artifactId>greenmail</artifactId>
      <version>1.5.10</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <artifactId>slf4j-api</artifactId>
          <groupId>org.slf4j</groupId>
        </exclusion>
      </exclusions>
    </dependency>
  </dependencies>

  <build>
    <finalName>optimize-backend-${project.version}</finalName>

    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-it-source</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>src/it/java</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <workingDirectory>${project.build.directory}</workingDirectory>
          <argLine>${test.argLine}</argLine>
          <skipTests>${skip.unit.tests}</skipTests>
          <trimStackTrace>false</trimStackTrace>
          <forkCount>${env.LIMITS_CPU}</forkCount>
          <reuseForks>true</reuseForks>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <filters>
                <filter>
                  <artifact>org.bouncycastle:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                  <resource>META-INF/spring.handlers</resource>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                  <resource>META-INF/spring.schemas</resource>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <resources>
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <include>**/*.java</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
      <resource>
        <directory>src/main/ssl</directory>
        <filtering>false</filtering>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>src/it/resources</directory>
        <filtering>true</filtering>
      </testResource>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>
  </build>

  <profiles>
    <profile>
      <id>docs</id>
      <properties>
        <skip.unit.tests>true</skip.unit.tests>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>com.webcohesion.enunciate</groupId>
            <artifactId>enunciate-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>docs</id>
                <goals>
                  <goal>docs</goal>
                </goals>
                <configuration>
                  <!-- the directory where to put the docs -->
                  <docsDir>${project.build.directory}/docs</docsDir>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>production</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <resources>
          <resource>
            <directory>${project.build.outputDirectory}/../../../client/build</directory>
            <targetPath>webapp</targetPath>
          </resource>
          <resource>
            <directory>src/main/java</directory>
            <includes>
              <include>**/*.xml</include>
            </includes>
          </resource>
          <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
          </resource>
        </resources>
      </build>
    </profile>

    <profile>
      <id>it</id>

      <properties>
        <tomcat.connector.http.port>8080</tomcat.connector.http.port>
        <http.port>${tomcat.connector.http.port}</http.port>

        <cargo.timeout>240000</cargo.timeout>
        <cargo.deploy.timeout>60000</cargo.deploy.timeout>
        <skip.unit.tests>true</skip.unit.tests>
      </properties>

      <dependencies>
        <dependency>
          <groupId>com.h2database</groupId>
          <artifactId>h2</artifactId>
          <version>1.4.196</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.postgresql</groupId>
          <artifactId>postgresql</artifactId>
          <version>42.2.5</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.camunda.optimize</groupId>
          <artifactId>engine-rest-secure</artifactId>
          <scope>test</scope>
          <type>war</type>
          <version>${project.version}</version>
        </dependency>
        <dependency>
          <groupId>org.camunda.optimize</groupId>
          <artifactId>engine-rest-custom</artifactId>
          <scope>test</scope>
          <type>war</type>
          <version>${project.version}</version>
        </dependency>
        <dependency>
          <groupId>org.camunda.optimize</groupId>
          <artifactId>engine-purge</artifactId>
          <scope>test</scope>
          <type>war</type>
          <version>${project.version}</version>
        </dependency>
        <dependency>
          <groupId>org.camunda.optimize</groupId>
          <artifactId>engine-database-connection</artifactId>
          <version>${project.version}</version>
          <type>war</type>
          <scope>test</scope>
        </dependency>
      </dependencies>

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <!-- to work around classloading bug on debian https://issues.apache.org/jira/browse/SUREFIRE-1588 -->
              <useSystemClassLoader>false</useSystemClassLoader>
              <argLine>${test.argLine}</argLine>
              <excludedGroups>${it.test.excludedGroups}</excludedGroups>
              <redirectTestOutputToFile>true</redirectTestOutputToFile>
              <properties>
                <property>
                  <name>listener</name>
                  <value>org.camunda.optimize.test.it.rule.StartOptimizeExecutionListener</value>
                </property>
              </properties>
              <systemProperties>
                <property>
                  <name>database</name>
                  <value>${database}</value>
                </property>
              </systemProperties>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>docker-start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <environmentVariables>
                    <CAMBPM_VERSION>${camunda.engine.version}</CAMBPM_VERSION>
                    <ES_VERSION>${elasticsearch.test.version}</ES_VERSION>
                  </environmentVariables>
                  <skip>${skip.docker}</skip>
                  <executable>docker-compose</executable>
                  <workingDirectory>..</workingDirectory>
                  <arguments>
                    <argument>-f</argument>
                    <argument>${docker.compose.file}</argument>
                    <argument>up</argument>
                    <argument>-d</argument>
                    <argument>--force-recreate</argument>
                    <argument>--renew-anon-volumes</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>docker-remove</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <skip>${skip.docker}</skip>
                  <executable>docker-compose</executable>
                  <workingDirectory>..</workingDirectory>
                  <arguments>
                    <argument>-f</argument>
                    <argument>${docker.compose.file}</argument>
                    <argument>rm</argument>
                    <argument>-sfv</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>check-cambpm-is-up</id>
                <phase>pre-integration-test</phase>
                <configuration>
                  <skip>${skip.docker}</skip>
                  <target name="check-cambpm-is-running" description="Check whether CamBPM is running">
                    <echo message="Check CamBPM Tomcat is running..." />
                    <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                      <socket server="localhost" port="${tomcat.connector.http.port}" />
                    </waitfor>
                    <echo message="CamBPM Tomcat socket is open. Checking for manager app to become available..." />
                    <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                      <http url="http://admin:admin@localhost:${tomcat.connector.http.port}/manager/text/list" />
                    </waitfor>
                    <echo message="CamBPM Tomcat manager app is running." />
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <executions>
              <execution>
                <id>start-container</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>redeploy</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <skip>${skipTests}</skip>
              <!-- Container configuration -->
              <container>
                <type>remote</type>
                <containerId>tomcat8x</containerId>
              </container>
              <configuration>
                <type>runtime</type>
                <properties>
                  <cargo.remote.username>admin</cargo.remote.username>
                  <cargo.remote.password>admin</cargo.remote.password>
                  <cargo.servlet.port>${tomcat.connector.http.port}</cargo.servlet.port>
                </properties>
              </configuration>
              <deployer>
                <type>remote</type>
              </deployer>
              <deployables>
                <deployable>
                  <groupId>org.camunda.optimize</groupId>
                  <artifactId>engine-rest-secure</artifactId>
                  <type>war</type>
                  <pingURL>
                    http://localhost:${tomcat.connector.http.port}/engine-rest-secure/engine/default/process-definition
                  </pingURL>
                  <pingTimeout>${cargo.deploy.timeout}</pingTimeout>
                  <properties>
                    <context>engine-rest-secure</context>
                  </properties>
                </deployable>
                <deployable>
                  <groupId>org.camunda.optimize</groupId>
                  <artifactId>engine-rest-custom</artifactId>
                  <type>war</type>
                  <pingURL>
                    http://localhost:${tomcat.connector.http.port}/engine-rest-custom/engine/default/process-definition
                  </pingURL>
                  <pingTimeout>${cargo.deploy.timeout}</pingTimeout>
                  <properties>
                    <context>engine-rest-custom</context>
                  </properties>
                </deployable>
                <deployable>
                  <groupId>org.camunda.optimize</groupId>
                  <artifactId>engine-purge</artifactId>
                  <type>war</type>
                  <properties>
                    <context>purge</context>
                  </properties>
                </deployable>
                <deployable>
                  <groupId>org.camunda.optimize</groupId>
                  <artifactId>engine-database-connection</artifactId>
                  <type>war</type>
                  <properties>
                    <context>engine-database-connection</context>
                  </properties>
                </deployable>
              </deployables>
            </configuration>
          </plugin>
        </plugins>
        <resources>
          <resource>
            <directory>${project.build.outputDirectory}/../../../client/build</directory>
            <targetPath>webapp</targetPath>
          </resource>
          <resource>
            <directory>src/main/java</directory>
            <includes>
              <include>**/*.xml</include>
            </includes>
          </resource>
          <resource>
            <directory>src/main/resources</directory>
            <filtering>true</filtering>
          </resource>
        </resources>
      </build>
    </profile>
  </profiles>
</project>
