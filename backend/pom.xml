<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.camunda.optimize</groupId>
    <artifactId>parent</artifactId>
    <version>3.3.0-SNAPSHOT</version>
  </parent>

  <artifactId>optimize-backend</artifactId>

  <properties>
    <jetty.version>9.4.33.v20201020</jetty.version>
    <jersey.version>2.32</jersey.version>
    <it.test.excludedGroups />
    <test.forkCount />

    <argLine>-Xms512m -Xmx1024m</argLine>
    <sonar.coverage.jacoco.xmlReportPaths>${basedir}/../${aggregate.report.dir}</sonar.coverage.jacoco.xmlReportPaths>
  </properties>

  <dependencies>

    <!-- Optimize dependencies -->
    <dependency>
      <groupId>org.camunda.optimize</groupId>
      <artifactId>client</artifactId>
      <version>${project.version}</version>
      <type>pom</type>
    </dependency>
    <dependency>
      <groupId>org.camunda.optimize</groupId>
      <artifactId>optimize-commons</artifactId>
      <version>${project.version}</version>
    </dependency>

    <!-- Camunda dependencies -->
    <dependency>
      <groupId>org.camunda.bpm.model</groupId>
      <artifactId>camunda-bpmn-model</artifactId>
      <version>${camunda.maven.artifacts.version}</version>
    </dependency>
    <dependency>
      <groupId>org.camunda.bpm.model</groupId>
      <artifactId>camunda-dmn-model</artifactId>
      <version>${camunda.maven.artifacts.version}</version>
    </dependency>
    <dependency>
      <groupId>org.camunda.bpm</groupId>
      <artifactId>camunda-engine</artifactId>
      <version>${camunda.maven.artifacts.version}</version>
    </dependency>
    <dependency>
      <groupId>org.camunda.bpm</groupId>
      <artifactId>camunda-license-check</artifactId>
      <version>2.6.0</version>
    </dependency>

    <!-- Javax XML -->
    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
      <version>2.3.1</version>
    </dependency>

    <!-- Spring -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-websocket</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context-support</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-tx</artifactId>
    </dependency>

    <!-- Jetty -->
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-server</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlet</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-servlets</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-rewrite</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty.websocket</groupId>
      <artifactId>websocket-server</artifactId>
      <version>${jetty.version}</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty.websocket</groupId>
      <artifactId>javax-websocket-server-impl</artifactId>
      <version>${jetty.version}</version>
    </dependency>

    <!-- JAX-RS -->
    <dependency>
      <groupId>org.glassfish.jersey.core</groupId>
      <artifactId>jersey-common</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.ext</groupId>
      <artifactId>jersey-bean-validation</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.ext</groupId>
      <artifactId>jersey-entity-filtering</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-json-jackson</artifactId>
      <version>${jersey.version}</version>
      <exclusions>
        <exclusion>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-annotations</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.ext</groupId>
      <artifactId>jersey-spring5</artifactId>
      <version>${jersey.version}</version>
      <exclusions>
        <!-- excludes taken over from spring-boot pom -->
        <exclusion>
          <groupId>org.jvnet</groupId>
          <artifactId>tiger-types</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.glassfish.hk2.external</groupId>
          <artifactId>bean-validator</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.glassfish.hk2.external</groupId>
          <artifactId>javax.inject</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.hibernate</groupId>
          <artifactId>hibernate-validator</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Authentication -->
    <dependency>
      <groupId>com.auth0</groupId>
      <artifactId>java-jwt</artifactId>
      <version>3.11.0</version>
      <exclusions>
        <exclusion>
          <artifactId>jackson-databind</artifactId>
          <groupId>com.fasterxml.jackson.core</groupId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Jackson/JSON -->
    <dependency>
      <groupId>com.fasterxml.jackson.jaxrs</groupId>
      <artifactId>jackson-jaxrs-json-provider</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jdk8</artifactId>
    </dependency>

    <!-- Quartz framework -->
    <dependency>
      <groupId>org.quartz-scheduler</groupId>
      <artifactId>quartz</artifactId>
      <version>${quartz.version}</version>
      <exclusions>
        <exclusion>
          <artifactId>slf4j-api</artifactId>
          <groupId>org.slf4j</groupId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Email framework -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-email</artifactId>
      <version>1.5</version>
    </dependency>

    <!-- CSV -->
    <dependency>
      <groupId>com.opencsv</groupId>
      <artifactId>opencsv</artifactId>
      <version>5.2</version>
    </dependency>

    <!-- Utilities -->
    <dependency>
      <groupId>com.github.ben-manes.caffeine</groupId>
      <artifactId>caffeine</artifactId>
      <version>2.8.6</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-math3</artifactId>
      <version>3.6.1</version>
    </dependency>
    <dependency>
      <groupId>com.github.sisyphsu</groupId>
      <artifactId>dateparser</artifactId>
      <version>1.0.6</version>
    </dependency>

    <!-- ClassGraph  -->
    <dependency>
      <groupId>io.github.classgraph</groupId>
      <artifactId>classgraph</artifactId>
      <version>4.8.90</version>
    </dependency>

    <!--Test dependencies-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <version>1.4.190</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.8.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpmime</artifactId>
      <version>${httpclient.version}</version>
      <exclusions>
        <exclusion>
          <artifactId>commons-codec</artifactId>
          <groupId>commons-codec</groupId>
        </exclusion>
      </exclusions>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.icegreen</groupId>
      <artifactId>greenmail</artifactId>
      <version>1.6.0</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <artifactId>slf4j-api</artifactId>
          <groupId>org.slf4j</groupId>
        </exclusion>
        <exclusion>
          <artifactId>junit</artifactId>
          <groupId>junit</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.camunda.bpm</groupId>
      <artifactId>camunda-engine-rest-core</artifactId>
      <version>${camunda.maven.artifacts.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>optimize-backend-${project.version}</finalName>

    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-it-source</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>src/it/java</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <workingDirectory>${project.build.directory}</workingDirectory>
          <trimStackTrace>false</trimStackTrace>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-dependencies-to-lib-folder</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/lib</outputDirectory>
              <includeScope>runtime</includeScope>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <resources>
      <resource>
        <directory>../client/build</directory>
        <targetPath>webapp</targetPath>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
      </resource>
      <resource>
        <directory>src/main/ssl</directory>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>src/it/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/*.properties</include>
        </includes>
      </testResource>
      <testResource>
        <directory>src/it/resources</directory>
        <filtering>false</filtering>
        <includes>
          <include>**/*</include>
        </includes>
      </testResource>
      <testResource>
        <directory>src/test/resources</directory>
      </testResource>
    </testResources>
  </build>

  <profiles>
    <profile>
      <id>docs</id>
      <properties>
        <skip.unit.tests>true</skip.unit.tests>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>com.webcohesion.enunciate</groupId>
            <artifactId>enunciate-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>docs</id>
                <goals>
                  <goal>docs</goal>
                </goals>
                <configuration>
                  <!-- the directory where to put the docs -->
                  <docsDir>${project.build.directory}/docs</docsDir>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>it</id>

      <properties>
        <tomcat.connector.http.port>8080</tomcat.connector.http.port>
        <http.port>${tomcat.connector.http.port}</http.port>

        <cargo.timeout>240000</cargo.timeout>
        <cargo.deploy.timeout>60000</cargo.deploy.timeout>
        <test.forkCount>${env.LIMITS_CPU}</test.forkCount>
      </properties>

      <dependencies>
        <dependency>
          <groupId>com.h2database</groupId>
          <artifactId>h2</artifactId>
          <version>1.4.196</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.postgresql</groupId>
          <artifactId>postgresql</artifactId>
          <version>42.2.18</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.camunda.optimize</groupId>
          <artifactId>engine-it-plugin</artifactId>
          <scope>test</scope>
          <type>war</type>
          <version>${project.version}</version>
        </dependency>
        <dependency>
          <groupId>org.camunda.optimize</groupId>
          <artifactId>optimize-main-test-plugin</artifactId>
          <version>${project.version}</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.camunda.optimize</groupId>
          <artifactId>optimize-pluginloading-test-plugin</artifactId>
          <version>${project.version}</version>
          <scope>test</scope>
        </dependency>
      </dependencies>

      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <excludedGroups>${it.test.excludedGroups}</excludedGroups>
              <forkCount>${test.forkCount}</forkCount>
              <reuseForks>true</reuseForks>
              <reportsDirectory>target/failsafe-reports/${surefire.forkNumber}</reportsDirectory>
              <systemPropertyVariables>
                <enginePrefix>${surefire.forkNumber}-</enginePrefix>
                <prefixedDefaultEngineName>${surefire.forkNumber}-integrationTest</prefixedDefaultEngineName>
                <indexPrefix>${surefire.forkNumber}-</indexPrefix>
                <!-- the 400/401 prefix allows up to 99 forks till we exceed the valid port range of 65535 -->
                <!-- and we stay in the user port range of 1024-49151 -->
                <optimizeHttpPort>400${surefire.forkNumber}</optimizeHttpPort>
                <optimizeHttpsPort>401${surefire.forkNumber}</optimizeHttpsPort>
                <smtpTestPort>500${surefire.forkNumber}</smtpTestPort>
                <elasticSearchMockServerPort>108${surefire.forkNumber}</elasticSearchMockServerPort>
                <engineMockServerPort>109${surefire.forkNumber}</engineMockServerPort>
                <camunda.engine.version>${camunda.engine.version}</camunda.engine.version>
              </systemPropertyVariables>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>docker-start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <environmentVariables>
                    <CAMBPM_VERSION>${camunda.engine.version}</CAMBPM_VERSION>
                    <ES_VERSION>${elasticsearch.test.version}</ES_VERSION>
                  </environmentVariables>
                  <skip>${skip.docker}</skip>
                  <executable>docker-compose</executable>
                  <workingDirectory>..</workingDirectory>
                  <arguments>
                    <argument>-f</argument>
                    <argument>${docker.compose.file}</argument>
                    <argument>up</argument>
                    <argument>-d</argument>
                    <argument>--force-recreate</argument>
                    <argument>--renew-anon-volumes</argument>
                  </arguments>
                </configuration>
              </execution>
              <execution>
                <id>docker-remove</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <skip>${skip.docker}</skip>
                  <executable>docker-compose</executable>
                  <workingDirectory>..</workingDirectory>
                  <arguments>
                    <argument>-f</argument>
                    <argument>${docker.compose.file}</argument>
                    <argument>rm</argument>
                    <argument>-sfv</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>check-cambpm-is-up</id>
                <phase>pre-integration-test</phase>
                <configuration>
                  <skip>${skip.docker}</skip>
                  <target name="check-cambpm-is-running" description="Check whether CamBPM is running">
                    <echo message="Check CamBPM Tomcat is running..." />
                    <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                      <socket server="localhost" port="${tomcat.connector.http.port}" />
                    </waitfor>
                    <echo message="CamBPM Tomcat socket is open. Checking for manager app to become available..." />
                    <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                      <http url="http://admin:admin@localhost:${tomcat.connector.http.port}/manager/text/list" />
                    </waitfor>
                    <echo message="CamBPM Tomcat manager app is running." />
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <executions>
              <execution>
                <id>start-container</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>redeploy</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <skip>${skipTests}</skip>
              <!-- Container configuration -->
              <container>
                <type>remote</type>
                <containerId>tomcat8x</containerId>
              </container>
              <configuration>
                <type>runtime</type>
                <properties>
                  <cargo.remote.username>admin</cargo.remote.username>
                  <cargo.remote.password>admin</cargo.remote.password>
                  <cargo.servlet.port>${tomcat.connector.http.port}</cargo.servlet.port>
                </properties>
              </configuration>
              <deployer>
                <type>remote</type>
              </deployer>
              <deployables>
                <deployable>
                  <groupId>org.camunda.optimize</groupId>
                  <artifactId>engine-it-plugin</artifactId>
                  <type>war</type>
                  <properties>
                    <context>engine-it-plugin</context>
                  </properties>
                </deployable>
              </deployables>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-valid-test-plugins</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>org.camunda.optimize</groupId>
                      <artifactId>optimize-main-test-plugin</artifactId>
                      <version>${project.version}</version>
                      <type>jar</type>
                      <overWrite>true</overWrite>
                      <outputDirectory>${project.build.directory}/testPluginsValid</outputDirectory>
                    </artifactItem>
                    <artifactItem>
                      <groupId>org.camunda.optimize</groupId>
                      <artifactId>optimize-pluginloading-test-plugin</artifactId>
                      <version>${project.version}</version>
                      <type>jar</type>
                      <overWrite>true</overWrite>
                      <outputDirectory>${project.build.directory}/testPluginsValid</outputDirectory>
                    </artifactItem>
                  </artifactItems>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <version>3.2.0</version>
            <executions>
              <execution>
                <id>create-invalid-optimize-testplugin-invalidVersion</id>
                <goals>
                  <goal>test-jar</goal>
                </goals>
                <phase>pre-integration-test</phase>
                <configuration>
                  <includes>
                    <include>**/plugin.version</include>
                  </includes>
                  <outputDirectory>${project.build.directory}/testPluginsInvalid/invalidVersion</outputDirectory>
                  <classifier>test-plugin-invalidVersion</classifier>
                </configuration>
              </execution>
              <execution>
                <id>create-invalid-optimize-testplugin-missingVersion</id>
                <goals>
                  <goal>jar</goal>
                </goals>
                <phase>pre-integration-test</phase>
                <configuration>
                  <excludes>**/*</excludes>
                  <outputDirectory>${project.build.directory}/testPluginsInvalid/missingVersion</outputDirectory>
                  <classifier>test-plugin-missingVersion</classifier>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
