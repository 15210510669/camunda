{
  $schema: "https://docs.renovatebot.com/renovate-schema.json",
  extends: [
    // Base configs for renovate
    "config:base",
    // Pins github actions digests
    "helpers:pinGitHubActionDigests",
    // Pins docker digests
    "docker:pinDigests",
    // Enables Dependency Dahboard issue to control renovate
    ":dependencyDashboard",
    // Sets the automerge type to 'pr'
    ":automergePr",
    // Enables automerging for patch version updates
    ":automergePatch",
    // Automerge can only happen when all checks are green
    ":automergeRequireAllStatusChecks",
    // Create separate PRs for patch releases
    ":separatePatchReleases",
    // Default labels added to event renovate PR
    ":labels(renovate,dependencies)",
    // add renovate/ prefix to every renovate branch
    ":renovatePrefix",
    // Enables semantic commits
    ":semanticCommits",
    // Sets the commit message to start with chore()
    ":semanticCommitTypeAll(chore)",
    // Raise PR when vulnerability alerts are detected
    ":enableVulnerabilityAlertsWithLabel(security)",
    // Groups together all Typescript deps
    "group:definitelyTyped",
  ],
  // How many days have to pass from the new package version appearance before the PR is created
  minimumReleaseAge: "3 days",
  // Disable auto rebasing
  rebaseWhen: "never",
  // When renovate should do the checks
  schedule: ["every weekday"],
  // How many PRs can exist at once
  prConcurrentLimit: 30,
  // Additional notes added to PRs
  prBodyNotes: [
    // Add warning note to each major version PR
    "{{#if isMajor}}:warning: THIS IS A MAJOR VERSION UPDATE :warning:{{/if}}",
    // This is added to each PR body
    "Before merging, *always* check with the release notes if any other changes need to be done.",
  ],
  // Branches to be checked
  baseBranches: [
    "master",
    "maintenance/3.10",
    "maintenance/3.9",
    "maintenance/3.7",
  ],
  // This ignores are the ones comming by default from config:base with exception to **/test/**
  // We do this to be able to test files in docker/test directory
  ignorePaths: [
    "**/node_modules/**",
    "**/bower_components/**",
    "**/vendor/**",
    "**/examples/**",
    "**/__tests__/**",
    "**/tests/**",
    "**/__fixtures__/**",
  ],
  // Here are credentials to private repos that renovate could not access by default
  hostRules: [
    {
      matchHost: "https://api.github.com/repos/camunda-cloud/",
      hostType: "github-tags",
      encrypted: {
        token: "wcFMA/xDdHCJBTolAQ//ZCDBjEcdT1ATZRSfzu3V7ot0bKFhzadLoUFd+bJ+F0Ylwv7b8kIEHZGpEy0qzz+fgmTeGq03JRHRu0jDgyJ394AzFHIav3j2AkPLpBWPQccQOCyjQ3poOn2wjwEEl5G+5jOCyswYoBvgNt+uaSutS7TKANgQXpuBAo0JCWxmjAKw1KvaOWNJTay7ec9ykBBaPH8iPlsrFRBupzjT+RT/CvjZNjQXrsq5monbkfPMyXlwDnlrffqiyxprOc9Z6heSSDMVEWqScJSUVBqlYNZZIYGHDN7MbDEwO4pcYKynzzotlZ6gjjA6gNY0ilMuxoP6wDHcH7L7YrV3pNMfl+QWX4SHs7EITAjI+WgM0O8zmWF4q8ILBXeFH0eLVTU4TgINJtyInIZ5eJht2oO8ZzmGM+t7bciIr1MY2dsOarwjkysX2ZtZ0aw5mEV2km9e52GScR8ZObf6VgaIDgasO9fPnybMqoWfzXLaGR5TSxNbS1B91Z7Cchxm2qWJAYdn7QpGNvjpVVxfROR4Sz7M35TgfGHRbFDnFpcIPcVdTqSb+BBiuL5J6SLEYDv6funibx75tommxPrGtcSF0y7ERf8mLO5h07xNLjFNXi5VeDStWDY/GeVJEdof6Lv0JN70TPILLWGrGJbEOdE7xwZZpE3iP5IZgqvRuogeik9qXdQLtqrSdgGNACmcEKkjG7j13R3KpubZFT/YX4LZWpTyYTBLjgP9+K7V3tsGQYGelKkX+1tg1jwEogC9koCAojTu5g8+8sGg8d7zNaHueP4gvcDsLC8cKxJ9Ood8COLHeE4/Cgg65QTSjogAQrf80x4Gr6TnV3rsh97DdsQ",
      },
    },
    {
      matchHost: "https://artifacts.camunda.com/artifactory/internal/",
      hostType: "maven",
      encrypted: {
        username: "wcFMA/xDdHCJBTolAQ//UN1MGGnC47AECDfiLbqJbnP02rTWTOltZA95dE+0Y1LGVtkwjE12qQrIHePQZij60JYTT0J1kRA0cHrey4i9YAI7D7qUNuQHeIGc6W3e60P71uq77DtgNnhJgxbr8lKWmELH2UQ1O/66lpMtc2icbheiByMX+UkDnOec3bvUXLImS/Qh0zMjWV0gXqVsFq527WPtxruQFF9dfRsl+mWbFYNN+ilVZ5cjbKHdRunDMMjT6Y+Yy/ffUE/YeBXCgV2F/7DdFaY3Ar8Dfn0UPLto+36x+fqb1PH4ipg5mAcYWuoJN37O9/gm4HG6bU/3OL9hyXPds0ReNTKKFNbPMTx0pXidcA/GNf1dVeT2VsGnze24jyfZiWDcQ3LYzWIsjYHfW8hM8QYwevVzvxXsoRg36V+tyO8GhNp/1mmsg6LAIKPqueQhBwDvLByanFFFvonDkK5ovh+ccgycOSAdWmWKHmIHgqyFXk6HvX2HNjvk5k6shHgU6uQAD7EMNfo4new0OLzUKkeiDwoNdMh0RwLDKaoI5tAeM0uyHvbc2JsfteQ1ZSx8CdvhvmSf3sw7gA8n9Fu7vpMEgdSAowVWnIMx7tGhpEPnkjo5I4LHut3G/5jRNOk1rMNCP7N3MAh8Wh1a/gd/seJO7BrNKRSFRZxW1DQLlaFVwtJA+9b8cJLaeIXSaQFc+BDRV2uXqeTzVeupoq2RNNmcYdHeXD6tECh5yuDtxKzTdn3aqkzstruOgLddEZKQ8VsnGqmPQrr1raJ+Gm+vzLDnzrmXvJaehFfypFKcfk5wxKHkvirA5Xsiu9HvL8DnlKWnATmnxw",
        password: "wcFMA/xDdHCJBTolAQ/9GewXx5neX4YgihT6PrDMJidRJjN76q4B5BotrIGq8rtCrMvnsh69h/YmHBSO3T8yHoIdKVYExCCSOShHr7dMHBigQGD46E7xX5emlPHjYC8iqGkh4UHmKDyu1/Zf7vVD6T5am5EpetiWCEu4iTjNNlIb6zrG8l7k9v3zsBxDrMwinssdbnAvSZmsI5Riu2UkNpNKQ8k9zt6vs1ZKs+uE3exHDAK0psorDUBQ3bSvrQGL1oxC9V1znJlYGEr9G6h/Z8/Sbos5DdRi/TUfJimSj8+uHX9ysnxFr3F3B6BoC8NoxRQhnn7Au2o4822TqAEHtaaEbg+5e5y7zKbBcWTOV6/f0Dt2G8157/ImMZNfnVSY9cudK6Qjqk8HPXt4opROFhN01I9N2Q0R+3TbU7UqHuZ9IIiO7b7uqi5E/5hXuw9+2vbujNwDosKdG3CvD6OAmjFCQYOxQH6mPCqi0LqDVqlidTNUGT5IeW88NGAFDAT/nsLrQlpmG0N/6QHU1V6v8o4Wfsn1AiUr2NdCD66sMT9vIaAE5T3BLu8Dc+Q+LulVbX85NfA0r9VutxU39FZKnMkOBuv8nrFzYMNBjxK+P6pP+LR1D8a+d4/C23GamZwJ/nuIB0YGSqRz+v34cyLq+a5s9XXod2z+KwD2S2TEoM58fdsIgrn2lcDCdpI5wyfScgE9ns8obR5g6Us30ESMVo4DU+81/16zLP7jasfvA4rZ7pvopvdvZ5LSA5JMgTxCyCtKjgNBDQqLkEzD5nECYH2cB9wY5i/BBm+L7Zqsn1rbNJJbrAvBYlS0TdB74QkmhKdZPlVFmhwK2/2RP9QowMiX5g",
      },
    },
  ],
  helmv3: {
    registryAliases: {
      "helm-camunda-io": "https://helm.camunda.io",
    },
  },
  packageRules: [
    // Frontend deps
    {
      addLabels: ["frontend"],
      languages: ["js"],
    },
    // Backend deps
    {
      addLabels: ["backend"],
      languages: ["java"],
    },
    // Infra deps
    {
      addLabels: ["infra"],
      managers: ["docker-compose", "dockerfile", "github-actions"],
    },
    // Docker deps
    {
      matchManagers: "dockerfile",
      separateMajorMinor: true,
    },
    {
      matchDatasources: ["docker"],
      matchPackagePatterns: ["alpine", "docker.io/library/alpine"],
      // Group all docker updates into one PR
      groupName: "Alpine dependencies",
      separateMajorMinor: true,
    },
    // Settings for patch versions update
    {
      matchUpdateTypes: ["patch"],
      addLabels: ["patch"],
      // Group all patch updates into one PR
      groupName: "Patch dependencies",
    },
  ],
  regexManagers: [
    // These two regex managers are checking for alpine image versions in files other than Dockerfile
    {
      fileMatch: [
        ".github/scripts/build-docker-images.sh",
        ".ci/pipelines/release_optimize.groovy",
      ],
      matchStrings: [
        "export BASE_IMAGE=(?<depName>.*?):(?<currentValue>.*?)\\s",
      ],
      datasourceTemplate: "docker",
    },
    {
      fileMatch: [
        "docker/test/verify.sh",
        "docker/test/docker-labels.golden.json",
      ],
      matchStrings: [
        "(?<depName>docker.io/library/alpine):(?<currentValue>\\d+\\.\\d+\\.\\d+)",
      ],
      datasourceTemplate: "docker",
    },
  ],
}
