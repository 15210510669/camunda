name: Tests

on:
  push:
    branches:
      - stable/*
      - release-*
      - trying
      - staging
  pull_request: {}
  workflow_dispatch: {}
  workflow_call: {}

jobs:
  integration-tests:
    name: Integration tests
    runs-on: "n1-standard-32-netssd-preempt"
    timeout-minutes: 45
    env:
      TC_CLOUD_TOKEN: ${{ secrets.TC_CLOUD_TOKEN }}
      TC_CLOUD_CONCURRENCY: 4
      ZEEBE_TEST_DOCKER_IMAGE: localhost:5000/camunda/zeebe:current-test
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-zeebe
      - uses: ./.github/actions/use-ci-nexus-cache
      - uses: ./.github/actions/build-zeebe
        id: build-zeebe
      - uses: ./.github/actions/build-docker
        with:
          repository: localhost:5000/camunda/zeebe
          version: current-test
          push: true
          distball: ${{ steps.build-zeebe.outputs.distball }}
      - name: Prepare Testcontainers Cloud agent
        if: env.TC_CLOUD_TOKEN != ''
        run: |
          curl -L -o agent https://app.testcontainers.cloud/download/testcontainers-cloud-agent_linux_x86-64
          chmod +x agent
          ./agent --private-registry-url=http://localhost:5000 '--private-registry-allowed-image-name-globs=*,*/*' &
          ./agent wait
      - run: >
          mvn -B -T2 --no-snapshot-updates
          -D junitThreadCount=12
          -D skipUTs -D skipChecks
          -D failsafe.rerunFailingTestsCount=3 -D flaky.test.reportDir=failsafe-reports
          -P parallel-tests,extract-flaky-tests
          -pl !:zeebe-elasticsearch-exporter
          verify
      - name: Upload test artifacts
        uses: ./.github/actions/collect-test-artifacts
        if: always()
        with:
          name: Integration Tests
  exporter-tests:
    name: Exporter tests
    runs-on: "n1-standard-8-netssd-preempt"
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-zeebe
        with:
          go: false
      - uses: ./.github/actions/use-ci-nexus-cache
      - uses: ./.github/actions/build-zeebe
        with:
          go: false
      - run: >
          mvn -B --no-snapshot-updates
          -D skipUTs -D skipChecks -D failsafe.rerunFailingTestsCount=3
          -pl :zeebe-elasticsearch-exporter
          verify
      - name: Upload test artifacts
        uses: ./.github/actions/collect-test-artifacts
        if: always()
        with:
          name: Exporter Tests
  project-list:
    # Builds a list of projects where unit tests can be run on hosted runners
    name: List projects
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: sudo apt-get -y install jq
      - name: Get Project List
        id: list-projects
        # Build a json array of module names that can be used for the matrix in `unit-tests`
        run: >
          echo "::set-output name=projects::$(find -not -path "./engine/pom.xml" -wholename "./*/pom.xml" -exec dirname {} \; | cut -c 3- | jq -cnR [inputs])"
    outputs:
      projects: ${{ steps.list-projects.outputs.projects }}
  unit-tests:
    name: Unit tests
    needs: project-list
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.project-list.outputs.projects) }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-zeebe
        with:
          go: false
      - uses: ./.github/actions/build-zeebe
        with:
          go: false
          maven-extra-args: -am -pl ${{ matrix.project }}
      - run: >
          mvn -B --no-snapshot-updates
          -D skipITs -D skipChecks
          -pl ${{ matrix.project }}
          verify
      - name: Normalize artifact name
        run: echo "ARTIFACT_NAME=$(echo ${{ matrix.project }} | sed 's/\//-/g')" >> $GITHUB_ENV
      - name: Upload test artifacts
        uses: ./.github/actions/collect-test-artifacts
        if: always()
        with:
          name: ${{ env.ARTIFACT_NAME }}
  slow-unit-tests:
    name: Slow unit tests
    runs-on: "n1-standard-8-netssd-preempt"
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-zeebe
        with:
          go: false
      - uses: ./.github/actions/use-ci-nexus-cache
      - uses: ./.github/actions/build-zeebe
        with:
          go: false
          maven-extra-args: -am -pl engine/
      - run: >
          mvn -B --no-snapshot-updates
          -D skipITs -D skipChecks
          -pl :zeebe-workflow-engine
          verify
      - name: Upload test artifacts
        uses: ./.github/actions/collect-test-artifacts
        if: always()
        with:
          name: Slow Unit Tests
  arm-tests:
    name: Smoke tests on ARM64
    timeout-minutes: 20
    runs-on: "n1-standard-8-netssd-preempt"
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-zeebe
      - uses: ./.github/actions/build-zeebe
        id: build-zeebe
      - uses: ./.github/actions/build-docker
        with:
          version: current-test
          push: false
          platforms: linux/arm64
          distball: ${{ steps.build-zeebe.outputs.distball }}
          build_sha: '633fe4adca4f3ccef5c900cba8b836625a740c91bc8bc9454cf48be9e7d18fac'
      - name: Setup QEMU emulation for Docker run
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Run basic container smoke test
        run: |
          DOCKER_CONTAINER=$(docker run -d --rm -e ZEEBE_BROKER_NETWORK_HOST=0.0.0.0 -p 9600:9600 \
            --platform linux/arm64 camunda/zeebe:current-test)
          docker logs -f "${DOCKER_CONTAINER}" >& test.log &
          timeout --foreground -s TERM 120s bash -c \
          'while [[ "$(curl -s -o /dev/null -m 3 -L -w ''%{http_code}'' http://localhost:9600/ready)" != "204" ]];\
                do echo "Waiting for http://localhost:9600/ready" && sleep 5;\
                done'
      - name: Save container output
        uses: actions/upload-artifact@v3
        with:
          name: Smoke tests on ARM64 output
          path: |
            test.log
          retention-days: 7
          if-no-files-found: ignore
  smoke-tests:
    # This name is hard-referenced from bors.toml
    # Remember to update that if this name, or the matrix.os changes
    name: Smoke tests on ${{ matrix.os }}
    timeout-minutes: 20
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
    env:
      JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-zeebe
        with:
          go: false
          # setting up maven often times out on macOS
          maven: ${{ matrix.os != 'macos-latest' }}
      - uses: ./.github/actions/build-zeebe
        with:
          go: false
          maven-extra-args: -am -pl qa/integration-tests
      - name: Run smoke test
        run: >
          mvn -B --no-snapshot-updates
          -DskipUTs -DskipChecks
          -pl qa/integration-tests
          -P smoke-test
          verify
      - name: Upload test artifacts
        uses: ./.github/actions/collect-test-artifacts
        if: always()
        with:
          name: Smoke Tests ${{ matrix.os }}
  java-randomized-tests:
    name: Java randomized tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-zeebe
        with:
          go: false
      - uses: ./.github/actions/build-zeebe
        with:
          go: false
      - run: mvn -T1C -B -D skipChecks -P parallel-tests,include-random-tests test
      - name: Upload test artifacts
        uses: ./.github/actions/collect-test-artifacts
        if: always()
        with:
          name: Java Randomized Tests
  go-client:
    name: Go client tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-zeebe
      - uses: ./.github/actions/build-zeebe
        id: build-zeebe
      # Once we're on Go 1.18, use the official gorelease to do this
      - name: Check backwards compatibility
        working-directory: clients/go/
        run: |
          go install github.com/smola/gocompat/...@v0.3.0
          PREFIX=github.com/camunda/zeebe/clients/go/v8
          EXCLUDE=""
          for file in {internal,cmd/zbctl/internal}/*; do
            EXCLUDE="$EXCLUDE --exclude-package $PREFIX/$file"
          done
          gocompat compare --go1compat ${EXCLUDE} ./...
      - uses: ./.github/actions/build-docker
        id: build-docker
        with:
          repository: camunda/zeebe
          version: current-test
          distball: ${{ steps.build-zeebe.outputs.distball }}
      - name: Run Go tests
        working-directory: clients/go
        run: go test -mod=vendor -v ./...
  java-client:
    name: Java client tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
      # First package the complete application
      - uses: ./.github/actions/setup-zeebe
        with:
          go: false
      - uses: ./.github/actions/build-zeebe
        with:
          go: false
          maven-extra-args: -am -pl clients/java
      # This is a workaround for java 8, which does not support the --add-exports options
      - run: rm .mvn/jvm.config
      # Then run client tests with JDK 8
      - uses: actions/setup-java@v3.4.1
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - run: >
          mvn -B
          -P disableCheckstyle,extract-flaky-tests
          -D skipChecks -D skipITs
          -D surefire.rerunFailingTestsCount=3
          -pl clients/java
          verify
      - name: Upload test artifacts
        uses: ./.github/actions/collect-test-artifacts
        if: always()
        with:
          name: Java 8 Client

  # Used by bors to check all tests, including the unit test matrix.
  # New test jobs must be added to the `needs` lists!
  test-summary:
    name: Test summary
    runs-on: ubuntu-latest
    needs:
      - integration-tests
      - exporter-tests
      - unit-tests
      - slow-unit-tests
      - smoke-tests
      - java-randomized-tests
      - go-client
      - java-client
    steps:
      - run: exit 0

  # We need to upload the event file as an artifact in order to support
  # publishing the results of forked repositories
  # https://github.com/EnricoMi/publish-unit-test-result-action#support-fork-repositories-and-dependabot-branches
  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
      - name: Upload
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Event File
          path: ${{ github.event_path }}
          retention-days: 1
