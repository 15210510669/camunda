name: Release Camunda Optimize to Camunda Nexus and tag GitHub repository.

on:
  workflow_dispatch:
    inputs:
      RELEASE_VERSION:
        required: true
        description: 'Version to release. Applied to pom.xml and Git tag.'
        default: '0.0.0'
      DEVELOPMENT_VERSION:
        required: true
        description: 'Next development version.'
        default: '0.1.0-SNAPSHOT'
      BRANCH:
        required: true
        description: 'The branch used for the release checkout.'
        default: '0.0.0'
      PUSH_CHANGES:
        required: true
        description: 'Should the changes be pushed to remote locations.'
        default: true
      DOCKER_LATEST:
        required: true
        description: 'Should the docker image be tagged as latest.'
        default: true
      ADDITIONAL_DOCKER_TAG:
        required: false
        description: 'Any additional tag that should be added to the docker image.'
        default: '0.0.0'
      DRY_RUN:
        required: true
        description: 'Check if this is an actual release or a dry run.'
        default: 'true'
      RELEASE_EXAMPLES:
        required: true
        description: 'Verify whether the optimize examples repository has to be updated.'
        default: false

jobs:
  build:
    name: Execute Release and Upload to Download Center
    runs-on: gcp-core-2-release
    strategy:
      fail-fast: true
    steps:
      - uses: actions/checkout@v4

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2.7.3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/common/jenkins/downloads-camunda-cloud_google_sa_key DEV_DOWNLOAD_CENTER_GCLOUD_KEY_BYTES | GCP_CREDENTIALS_NAME;
            secret/data/products/optimize/ci/camunda-optimize GITHUB_OPTIMIZE_APP_ID;
            secret/data/products/optimize/ci/camunda-optimize GITHUB_OPTIMIZE_APP_KEY;

      - name: Setup Maven
        uses: camunda/camunda-optimize/.github/actions/setup-maven@master
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Is current release patch
        id: is-patch
        env:
          RELEASE_VERSION: ${{ github.event.inputs.RELEASE_VERSION }}
        run: |
          is_patch="true"
          patch_version=$(echo "$RELEASE_VERSION" | cut -d. -f3)
          if [[ ! "$patch_version" == *"-"* ]] && [[ "$patch_version" == "0" ]]; then
            is_patch="false"
          fi
          echo "$is_patch"
          echo "is_patch=$is_patch" >> "$GITHUB_OUTPUT"

      - name: Generate a GitHub token
        id: github-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ steps.secrets.outputs.GITHUB_OPTIMIZE_APP_ID }}
          private_key: ${{ steps.secrets.outputs.GITHUB_OPTIMIZE_APP_KEY }}

      # This still needs changing once we are on prod
      - name: Upload artifact to Camunda Download Center
        if: inputs.DRY_RUN != 'true'
        uses: camunda/infra-global-github-actions/download-center-upload@main
        with:
          gcp_credentials: ${{ steps.secrets.outputs.GCP_CREDENTIALS_NAME }}
          ee: 'true'
          env: 'dev'
          artifact_file: target/checkout/distro/target/*.{tar.gz,zip}

      - name: Auto-update previous version
        env:
          GITHUB_TOKEN: ${{ steps.github-token.outputs.token }}
          GITHUB_APP_ID: ${{ steps.secrets.outputs.GITHUB_OPTIMIZE_APP_ID }}
          IS_PATCH: ${{ steps.is-patch.outputs.is_patch }}
          RELEASE_VERSION: ${{ github.event.inputs.RELEASE_VERSION }}
          BRANCH: ${{ github.event.inputs.BRANCH }}
        run: |
          .github/scripts/update-previous-version.sh

      - name: Trigger release examples repo
        if: inputs.RELEASE_EXAMPLES == 'true'
        env:
          GITHUB_TOKEN: ${{ steps.github-token.outputs.token }}
          GITHUB_APP_ID: ${{ steps.secrets.outputs.GITHUB_OPTIMIZE_APP_ID }}
          RELEASE_VERSION: ${{ github.event.inputs.RELEASE_VERSION }}
          DEVELOPMENT_VERSION: ${{ github.event.inputs.DEVELOPMENT_VERSION }}
          BRANCH: ${{ github.event.inputs.BRANCH }}
        run: |
          .github/scripts/update_example_repo.sh