# This GitHub Actions workflow automates the CI process for the 'tasklist' service.
# It triggers on a `workflow_call` event and accepts inputs for branch name[required], Java version[optional], and fork count[optional].
#
# It consists of a several steps:
# 1. Setup: It checks out the specified branch, sets up Java and Maven with the provided inputs, and imports secrets from Vault.
# 2. Build: Then it builds the Maven artifacts and Docker images
# 3. Tests: Runs unit and integration tests.
# 4. Reports: Publishes the test results, even if some steps failed.
# 5. Upload: Deploys SNAPSHOT Docker image and mvn artifacts
#
# Environment variables are used to control CPU limits and define the image tags used for Docker builds.
# This workflow is designed to provide a comprehensive, automated CI process that ensures code quality, handles secrets securely,
# and enables detailed reporting of test results.

name: CI Reusable

on:
  workflow_call:
    inputs:
      branch:
        description: "The branch name to be used for the workflow"
        required: true
        type: string
      javaVersion:
        description: "The version of Java to be used to build the service"
        required: false
        type: number
        default: 17
      forkCount:
        description: "The number of VMs to fork in parallel in order to execute the tests"
        required: false
        default: 4
        type: number
      testProfile:
        description: "test profile used on ES/OS test execution"
        required: true
        type: string
      database:
        description: "database used on ES/OS test execution"
        required: true
        type: string

defaults:
  run:
    # use bash shell by default to ensure pipefail behavior is the default
    # see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
    shell: bash

env:
  JAVA_VERSION: ${{ inputs.javaVersion }}
  BRANCH_NAME: ${{ inputs.branch }}
  IS_MASTER_BRANCH: ${{ inputs.branch == 'master' }}
  IS_FE_BRANCH: ${{ startsWith(inputs.branch, 'fe-') || startsWith(inputs.branch, 'renovate/client/') }}
  LIMITS_CPU: ${{ inputs.forkCount }} # consumed by `maven-surefire-plugin` & `maven-failsafe-plugin` plugins defined in main `pom.xml` file

jobs:
  build:
    name: "'${{ inputs.branch }}' build"
    runs-on: ${{ (github.event_name == 'pull_request' && startsWith(inputs.branch, 'fe-')) && 'ubuntu-latest' || 'gcp-core-16-default' }}
    timeout-minutes: 120
    steps:
      # Setup: checkout branch
      - name: "Checkout '${{ inputs.branch }}' branch"
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          ref: refs/heads/${{ inputs.branch }}
          fetch-depth: 0  # fetches all history for all branches and tags

      #########################################################################
      # Setup: define env variables
      - name: Set GitHub environment variables
        run: |
          GIT_COMMIT_HASH=$(git rev-parse ${{ inputs.branch }})
          BRANCH_SLUG=$(echo "${{ inputs.branch }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
          echo "IMAGE_TAG=$(if [ "${{ inputs.branch }}" = "master" ]; then echo $GIT_COMMIT_HASH; else echo "branch-$BRANCH_SLUG "; fi)" >> $GITHUB_ENV
          echo "CI_IMAGE_TAG=ci-$GIT_COMMIT_HASH" >> $GITHUB_ENV
          echo "PR_IMAGE_TAG=pr-$GIT_COMMIT_HASH" >> $GITHUB_ENV

      #########################################################################
      # Setup: import secrets from vault
      - name: Import Secrets
        id: secrets # important to refer to it in later steps
        uses: hashicorp/vault-action@2fb925f14cae8d86a835e7f5c14065e98fad63d8
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          exportEnv: false # we rely on step outputs, no need for environment variables
          secrets: |
            secret/data/github.com/organizations/camunda NEXUS_USR;
            secret/data/github.com/organizations/camunda NEXUS_PSW;
            secret/data/products/tasklist/ci/tasklist REGISTRY_HUB_DOCKER_COM_USR;
            secret/data/products/tasklist/ci/tasklist REGISTRY_HUB_DOCKER_COM_PSW;

      #########################################################################
      # Setup: configure Java, Maven, settings.xml
      - name: Setup Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: ${{ env.JAVA_VERSION }}
          cache: "maven"

      - name: Setup Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.6

      # Setup: Use CI Nexus as co-located pull-through cache for Maven artifacts via ~/.m2/settings.xml
      - name: Create Maven settings.xml
        uses: s4u/maven-settings-action@v2.8.0
        with:
          githubServer: false
          servers: |
            [{
              "id": "camunda-nexus",
              "username": "${{ steps.secrets.outputs.NEXUS_USR }}",
              "password": "${{ steps.secrets.outputs.NEXUS_PSW }}"
            }]
          mirrors: '[{"url": "https://repository.nexus.camunda.cloud/content/groups/internal/", "id": "camunda-nexus", "mirrorOf": "*", "name": "camunda Nexus"}]'

      #########################################################################
      # Build: maven artifacts and Docker images
      - name: Build Maven
        run: |
          mvn com.coveo:fmt-maven-plugin:check -T1C clean deploy -P -docker -DskipTests=true -DaltStagingDirectory=${{ github.workspace }}/staging-${{ env.BRANCH_NAME }} -DskipRemoteStaging=true -Dmaven.deploy.skip=true

      - name: Login to Harbor docker registry
        uses: docker/login-action@v3
        with:
          registry: registry.camunda.cloud
          username: ${{ steps.secrets.outputs.NEXUS_USR }}
          password: ${{ steps.secrets.outputs.NEXUS_PSW }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            registry.camunda.cloud/team-hto/tasklist
          tags: |
            ${{ env.IMAGE_TAG }}
            ${{ env.CI_IMAGE_TAG }}
            ${{ env.PR_IMAGE_TAG }}
      - name: Build Docker image
        uses: ./.github/actions/build-docker
        with:
          tags: ${{ steps.meta.outputs.tags }}
          push: true

      #########################################################################
      # Tests: run tests for all Maven modules
      - name: Run Tests
        if: ${{ env.IS_FE_BRANCH == 'false' }}
        run: |
          mvn -T4 verify -P ${{ inputs.testProfile }},skipFrontendBuild -B --fail-at-end -Dfailsafe.rerunFailingTestsCount=2 -Dcamunda.tasklist.database=${{ inputs.database }}

      #########################################################################
      # Reports: publish test metrics results
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.11.0
        if: ${{ env.IS_FE_BRANCH == 'false' && (success() || failure()) }} # Publish results for non-FE branch even if the build step was failed
        with:
          files: |
            **/target/surefire-reports/*.xml
            **/target/failsafe-reports/TEST-*.xml

      # Sanitize the branch name to replace non alphanumeric characters with `-`
      - id: sanitize
        uses: camunda/infra-global-github-actions/sanitize-branch-name@main
        with:
          branch: ${{ env.BRANCH_NAME }}
          max_length: '50'

      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        if: ${{ env.IS_FE_BRANCH == 'false' && (success() || failure()) }}
        with:
          name: jacoco-report-${{ steps.sanitize.outputs.branch_name }}
          path: ${{ github.workspace }}/test-coverage/target/site/jacoco-aggregate/
          retention-days: 2

      #########################################################################
      # Upload: deploy SNAPSHOT Docker image and mvn artifacts
      - name: Login to docker hub
        if: ${{ env.IS_MASTER_BRANCH == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_USR }}
          password: ${{ steps.secrets.outputs.REGISTRY_HUB_DOCKER_COM_PSW }}
      - name: Build SNAPSHOT Docker image
        if: ${{ env.IS_MASTER_BRANCH == 'true' }}
        uses: ./.github/actions/build-docker
        with:
          tags: |
            camunda/tasklist:SNAPSHOT
          push: true
      - name: Deploy - Nexus SNAPSHOT
        if: ${{ env.IS_MASTER_BRANCH == 'true' }}
        run: |
          mvn org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged -DskipTests=true -P -docker,skipFrontendBuild -B -DaltStagingDirectory=${{ github.workspace }}/staging-${{ env.BRANCH_NAME }} -DskipRemoteStaging=true -Dmaven.deploy.skip=true
