name: Camunda Platform Release
on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'releaseVersion:'
        type: string
        required: true
      nextDevelopmentVersion:
        description: 'nextDevelopmentVersion: e.g. 8.X.X-SNAPSHOT'
        type: string
        required: true
      isLatest:
        description: 'isLatest: updates the `latest` docker tag'
        type: boolean
        required: false
        default: false
      releaseBranch:
        description: 'releaseBranch: defaults to `release-$releaseVersion` if not set'
        type: string
        required: false
        default: ''
      dryRun:
        description: 'dryRun: Whether to perform a dry release where no changes/artifacts are pushed'
        type: boolean
        required: true
        default: false

env:
  RELEASE_BRANCH: ${{ inputs.releaseBranch != '' && inputs.releaseBranch || format('release-{0}', inputs.releaseVersion) }}
  RELEASE_VERSION: ${{ inputs.releaseVersion }}
  GH_TOKEN: ${{ github.token }}

jobs:
  github:
    name: Github Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_BRANCH }}
          fetch-depth: 0
      - name: Install Zeebe changelog tool
        run: |
          gh release download --repo zeebe-io/zeebe-changelog --pattern '*_Linux_i386.tar.gz'
          tar -xzvf zeebe-changelog_*
          chmod +x zcl
      - name: Generate Changelog for patch release
        id: gen-changelog
        run: |
          set -euox pipefail
          changelog="Release ${{ inputs.releaseVersion }}"
          
          # Right now we only support patch releases for generating the changelog
          # as it is the easiest to automate and the most repetitive work to do on a release
          if [[ "${{ inputs.releaseVersion }}" =~ ^8\.[1-9][0-9]*\.[1-9][0-9]*$ ]]
          then
            # Next, add the release labels to the release's issues, specifying the previous and current release in place of ZCL_FROM_REV and ZCL_TARGET_REV, respectively.
            #
            # ZCL_TARGET_REV should be replaced with the tag name for the version you are releasing, and 
            # ZCL_FROM_REV should be replaced as the tag name for the previous version, based on the release type:
            #
            # PATCH: the tag for the previous patch version on the same minor branch. e.g. if you're releasing 1.2.3, then ZCL_FROM_REV=1.2.2.
            # To find the previous patch version we extract the patch version and subtract by one
            patchVersion=$(echo ${{ inputs.releaseVersion }} | sed 's/8\.[1-9][0-9]*\.//')
            majorMinor=$(echo ${{ inputs.releaseVersion }} | sed 's/\.[1-9][0-9]*$//')
            ZCL_FROM_REV="$majorMinor".$(( patchVersion - 1 ))
            ZCL_TARGET_REV="${{ inputs.releaseVersion }}"

            # This will add labels to the issues in GitHub. You can verify this step by looking at closed issues. They should now be tagged with the release.
            ./zcl add-labels \
            --token=${{ secrets.GITHUB_TOKEN }} \
            --from=$ZCL_FROM_REV \
            --target=$ZCL_TARGET_REV \
            --label="version:$ZCL_TARGET_REV" \
            --org camunda --repo zeebe

            # This command will print the markdown code to the console. You will need to manually insert this output into the release draft.
            changelog=$(./zcl generate \
            --token=${{ secrets.GITHUB_TOKEN }} \
            --label="version:$ZCL_TARGET_REV" \
            --org camunda --repo zeebe)
          fi

          echo 'CHANGELOG<<EOF' >> $GITHUB_OUTPUT
          echo $changelog >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
