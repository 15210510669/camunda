---
name: CI

on:
  push:
    branches:
      - main
      - stable/*
      - release-*
  pull_request: {}
  merge_group: {}
  workflow_dispatch: {}

concurrency:
  cancel-in-progress: true
  group: "${{ github.workflow }}-${{ github.ref }}"

defaults:
  run:
    # use bash shell by default to ensure pipefail behavior is the default
    # see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
    shell: bash

env:
  DOCKER_PLATFORMS: "linux/amd64,linux/arm64"

jobs:
  detect-changes:
    outputs:
      actionlint: ${{ steps.filter.outputs.actionlint }}
      java-unit-tests: ${{ steps.filter.outputs.java-unit-tests }}
      docker-ci: ${{ steps.filter.outputs.docker-ci }}
      identity-frontend-tests: ${{ steps.filter.outputs.identity-frontend-tests }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      # Detect changes against the base branch
      - name: Detect changes
        uses: ./.github/actions/paths-filter
        id: filter

  actionlint:
    if: needs.detect-changes.outputs.actionlint == 'true'
    needs: [detect-changes]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      # renovate: datasource=github-releases depName=rhysd/actionlint
      ACTIONLINT_VERSION: '1.7.1'
    steps:
      - uses: actions/checkout@v4
      - run: echo "::add-matcher::.github/actionlint-matcher.json"
      - run: |
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash) $ACTIONLINT_VERSION
          ./actionlint -shellcheck '' -ignore 'property "vault_.+" is not defined in object type' -ignore 'object type "{}" cannot be filtered by object filtering `.*` since it has no object element'
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}

  java-unit-tests:
    if: needs.detect-changes.outputs.java-unit-tests == 'true'
    needs: [detect-changes]
    runs-on: [ self-hosted, linux, amd64, "16" ]
    timeout-minutes: 30
    outputs:
      flakyTests: ${{ steps.analyze-test-run.outputs.flakyTests }}
    steps:
      - uses: actions/checkout@v4
      - name: Install and allow strace tests
        run: |
          sudo apt-get -qq update && sudo apt-get install -y strace
          sudo sysctl -w kernel.yama.ptrace_scope=0
      - uses: ./.github/actions/setup-zeebe
        with:
          go: false
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
      - uses: ./.github/actions/build-zeebe
        with:
          go: false
          maven-extra-args: -T1C -PskipFrontendBuild
      - name: Create build output log file
        run: echo "BUILD_OUTPUT_FILE_PATH=$(mktemp)" >> $GITHUB_ENV
      - name: Maven Test Build
        # we use the verify goal here as flaky test extraction is bound to the post-integration-test
        # phase of Maven https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#default-lifecycle
        run: >
          ./mvnw -T2 -B --no-snapshot-updates
          -D skipITs -D skipQaBuild=true -D skipChecks -D surefire.rerunFailingTestsCount=3
          -D junitThreadCount=16
          -P skip-random-tests,parallel-tests,extract-flaky-tests
          verify
          | tee "${BUILD_OUTPUT_FILE_PATH}"
      - name: Analyze Test Runs
        id: analyze-test-run
        if: always()
        uses: ./.github/actions/analyze-test-runs
        with:
          buildOutputFilePath: ${{ env.BUILD_OUTPUT_FILE_PATH }}
      - name: Upload test artifacts
        uses: ./.github/actions/collect-test-artifacts
        if: ${{ failure() || cancelled() }}
        with:
          name: "unit tests"
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  docker-checks:
    if: needs.detect-changes.outputs.docker-ci == 'true'
    needs: [ detect-changes ]
    runs-on: ubuntu-latest
    timeout-minutes: 25
    services:
      # local registry is used as this job needs to push as it builds multi-platform images
      registry:
        image: registry:2
        ports:
          - 5000:5000
    env:
      LOCAL_DOCKER_IMAGE: localhost:5000/camunda/camunda
      TEST_ELASTICSEARCH_IMAGE: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
    steps:
      - uses: actions/checkout@v4
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          config: ./.hadolint.yaml
          dockerfile: ./camunda.Dockerfile
          format: sarif
          output-file: ./hadolint.sarif
          no-color: true
          verbose: true
      - name: Upload Hadolint Results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./hadolint.sarif
      - uses: ./.github/actions/setup-zeebe
        with:
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
          docker-token: REGISTRY_HUB_DOCKER_COM_PSW
          docker-secret-path: secret/data/products/camunda/ci/github-actions
      - uses: ./.github/actions/build-frontend
        id: build-operate-fe
        with:
          directory: ./operate/client
      - uses: ./.github/actions/build-frontend
        id: build-tasklist-fe
        with:
          directory: ./tasklist/client
      - uses: ./.github/actions/build-zeebe
        id: build-camunda
        with:
          maven-extra-args: -PskipFrontendBuild
          go: false
      - uses: ./.github/actions/build-platform-docker
        id: build-camunda-docker
        with:
          # we use a local registry for pushing
          repository: ${{ env.LOCAL_DOCKER_IMAGE }}
          distball: ${{ steps.build-camunda.outputs.distball }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          dockerfile: camunda.Dockerfile
          # push is needed for multi-arch images as buildkit does not support loading them locally
          push: true
      - name: Verify Docker image
        uses: ./.github/actions/verify-platform-docker
        with:
          imageName: ${{ env.LOCAL_DOCKER_IMAGE }}
          date: ${{ steps.build-camunda-docker.outputs.date }}
          revision: ${{ github.sha }}
          version: ${{ steps.build-camunda-docker.outputs.version }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          goldenfile: camunda-docker-labels.golden.json
      - name: Run Docker tests
        run: |
          ./mvnw -f dist --no-snapshot-updates -DskipChecks -Dtest=CamundaDockerIT -Dsurefire.rerunFailingTestsCount=3 \
          -Dcamunda.docker.test.enabled=true \
          -Dcamunda.docker.test.image="${{ env.LOCAL_DOCKER_IMAGE }}:${{ steps.build-camunda-docker.outputs.version }}" \
          -Dcamunda.docker.test.elasticsearch.image="${{ env.TEST_ELASTICSEARCH_IMAGE }}" \
          test
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  identity-frontend-tests:
    if: needs.detect-changes.outputs.identity-frontend-tests == 'true'
    needs: [detect-changes]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    defaults:
      run:
        working-directory: identity/client
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: identity/client/yarn.lock
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Check formatting
        run: yarn test:format
      - name: Lint code
        run: yarn test:lint
      - name: Unit & Integration tests
        run: yarn test:unit
      - name: Check licenses
        run: yarn test:licenses
      - name: Build frontend
        run: yarn build
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}

  check-results:
    # Used by the merge queue to check all tests, including the unit test matrix.
    # New test jobs must be added to the `needs` lists!
    # This name is hard-coded in the branch rules; remember to update that if this name changes
    if: always()
    runs-on: ubuntu-latest
    outputs:
      flakyUnitTests: ${{ needs.java-unit-tests.outputs.flakyTests }}
    needs:
      - actionlint
      - java-unit-tests
      - docker-checks
      - identity-frontend-tests
    steps:
      - run: exit ${{ ((contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'failure')) && 1) || 0 }}

  notify-if-failed:
    name: Send slack notification on build failure
    runs-on: ubuntu-latest
    needs: [ check-results ]
    if: failure() && github.repository == 'camunda/camunda' && github.ref == 'refs/heads/main'
    steps:
      - id: slack-notify
        name: Send slack notification
        uses: slackapi/slack-github-action@v1.26.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": ":alarm: Build on `main` failed! :alarm:\n${{ github.event.head_commit.url }}",
             	"blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":alarm: Build on `main` failed! :alarm:"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please check the related commit: ${{ github.event.head_commit.url }}\n \\cc @zeebe-medic"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Detected flaky unit tests:* \n ${{ env.FLAKY_UNIT_TESTS }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          FLAKY_UNIT_TESTS: ${{needs.check-results.outputs.flakyUnitTests}}


  deploy-camunda-docker-snapshot:
    name: Deploy snapshot Camunda Docker image
    needs: [ detect-changes, check-results ]
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.docker-ci == 'true' && github.repository == 'camunda/camunda' && github.ref == 'refs/heads/main'
    concurrency:
      group: deploy-camunda-docker-snapshot
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-zeebe
        with:
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
          docker-token: REGISTRY_HUB_DOCKER_COM_PSW
          docker-secret-path: secret/data/products/camunda/ci/github-actions
      - uses: ./.github/actions/build-frontend
        id: build-operate-fe
        with:
          directory: ./operate/client
      - uses: ./.github/actions/build-frontend
        id: build-tasklist-fe
        with:
          directory: ./tasklist/client
      - uses: ./.github/actions/build-zeebe
        id: build-camunda
        with:
          maven-extra-args: -PskipFrontendBuild
          go: false
      - uses: ./.github/actions/build-platform-docker
        id: build-camunda-docker
        with:
          repository: camunda/camunda
          version: SNAPSHOT
          distball: ${{ steps.build-camunda.outputs.distball }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          dockerfile: camunda.Dockerfile
          push: true
