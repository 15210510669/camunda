name: Spring Boot Starter Camunda SDK CI

on:
  push:
    branches:
      - main
      - stable/*
      - release-*
      - trying
      - staging
    paths:
      - '.github/workflows/spring-boot-starter-camunda-sdk-ci.yml'
      - 'spring-boot-starter-camunda-sdk/**'
  pull_request:
    paths:
      - '.github/workflows/spring-boot-starter-camunda-sdk-ci.yml'
      - 'spring-boot-starter-camunda-sdk/**'
  merge_group: { }
  workflow_dispatch: { }
  workflow_call: { }

concurrency:
  cancel-in-progress: true
  group: "${{ github.workflow }}-${{ github.ref }}"

defaults:
  run:
    # use bash shell by default to ensure pipefail behavior is the default
    # see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
    shell: bash

env:
  DOCKER_PLATFORMS: "linux/amd64,linux/arm64"

jobs:
  unit-tests:
    name: Unit tests
    runs-on: [ self-hosted, linux, amd64, "16" ]
    timeout-minutes: 15
    outputs:
      flakyTests: ${{ steps.analyze-test-run.outputs.flakyTests }}
    steps:
      - uses: actions/checkout@v4
      - name: Install and allow strace tests
        run: |
          sudo apt-get -qq update && sudo apt-get install -y strace
          sudo sysctl -w kernel.yama.ptrace_scope=0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'
      - name: Create build output log file
        run: echo "BUILD_OUTPUT_FILE_PATH=$(mktemp)" >> $GITHUB_ENV
      - name: Maven Test Build
        # we use the verify goal here as flaky test extraction is bound to the post-integration-test
        # phase of Maven https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#default-lifecycle
        run: >
          ./mvnw -T2 -B --no-snapshot-updates
          -D skipITs -D skipChecks -D surefire.rerunFailingTestsCount=3
          -D junitThreadCount=16
          -P skip-random-tests,parallel-tests,extract-flaky-tests
          -f spring-boot-starter-camunda-sdk
          verify
          | tee "${BUILD_OUTPUT_FILE_PATH}"
      - name: Normalize artifact name
        run: echo "ARTIFACT_NAME=$(echo ${{ matrix.project }} | sed 's/\//-/g')" >> $GITHUB_ENV
      - name: Analyze Test Runs
        id: analyze-test-run
        if: always()
        uses: ./.github/actions/analyze-test-runs
        with:
          buildOutputFilePath: ${{ env.BUILD_OUTPUT_FILE_PATH }}
      - name: Upload test artifacts
        uses: ./.github/actions/collect-test-artifacts
        if: ${{ failure() || cancelled() }}
        with:
          name: "unit tests"
  java-checks:
    name: Java checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-zeebe
        with:
          go: false
          maven-cache-key-modifier: java-checks
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
      - run: ./mvnw -T1C -B -D skipTests -P !autoFormat,checkFormat,spotbugs,skipFrontendBuild verify
  test-summary:
    # Used by the merge queue to check all tests, including the unit test matrix.
    # New test jobs must be added to the `needs` lists!
    # This name is hard-coded in the branch rules; remember to update that if this name changes
    name: Test summary
    if: always()
    runs-on: ubuntu-latest
    outputs:
      flakyUnitTests: ${{ needs.unit-tests.outputs.flakyTests }}
      flakyIntegrationTests: ${{ needs.integration-tests.outputs.flakyTests }}
    needs:
      - unit-tests
      - java-checks
    steps:
      - run: exit ${{ ((contains(needs.*.result, 'skipped') || contains(needs.*.result, 'failure')) && 1) || 0 }}
  auto-merge:
    # This workflow will auto merge a PR authored by backport-action.
    # It runs only on open PRs ready for review.
    #
    # It will merge the PR only if it is authored by backport-action and all CI checks are successful
    # OR if it is authored by renovate[bot] and all CI checks are successful.
    #
    # The workflow is divided into multiple sequential jobs to allow giving only minimal permissions to
    # the GitHub token passed around.
    name: Auto-merge backport, release, and renovate PRs
    runs-on: ubuntu-latest
    needs: [ test-summary ]
    if: |
      github.repository == 'camunda/zeebe' &&
      github.event_name == 'pull_request' &&
      (github.actor == 'backport-action' || github.actor == 'camundait')
    permissions:
      checks: read
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{ secrets.AUTOMERGE_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - id: approve-and-merge-backport-renovate
        name: Approve and merge backport PR
        run: |
          gh pr review ${{ github.event.pull_request.number }} --approve
          # Call the API directly to work around https://github.com/cli/cli/issues/8352
          gh api graphql -f query='mutation PullRequestAutoMerge {enablePullRequestAutoMerge(input: {pullRequestId: "${{ github.event.pull_request.node_id }}"}) {clientMutationId}}'

  # This job will trigger another workflow such that it will trigger a re-run of this failing workflow
  # We can't automatically do this here, since you can only re-run a workflow if it has finished,
  # and while this job is running, the workflow clearly hasn't finished
  #
  # It will only retry if the workflow failed, the run count is < 3 (to avoid infinite loops), and
  # the author is backport-action, renovate, or camundait (for release PRs)
  retry-workflow:
    name: Retry release, renovate, or backport PRs automatically
    needs: [ test-summary ]
    if: |
      failure() &&
      fromJSON(github.run_attempt) < 3 &&
      github.repository == 'camunda/zeebe' &&
      (github.actor == 'backport-action' || github.actor == 'renovate[bot]' || github.actor == 'camundait')
    runs-on: ubuntu-latest
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Retry workflow run ${{ github.run_id }}
        run: gh workflow run retry-workflow.yml -F run_id=${{ github.run_id }}
