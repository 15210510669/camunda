name: Release
on:
  workflow_dispatch:
    inputs:
      releaseBranch:
        description: 'The branch to perform the release on, defaults to `release-$releaseVersion`'
        required: false
        default: ''
      releaseVersion:
        description: 'The version to be build and released. If no releaseBranch specified, expecting `release-$releaseVersion` to already exist.'
        required: true
      nextDevelopmentVersion:
        description: 'Next development version, e.g. 8.X.X-SNAPSHOT.'
        required: true
      pushReleaseArtifacts:
        description: 'Whether to push release commits and artifacts to remote (Git tags, Maven artifacts, Github Release)'
        default: false

jobs:
  release:
    name: Maven & Go Release
    runs-on: n1-standard-16-netssd-preempt-quick
    timeout-minutes: 30
    env:
      RELEASE_VERSION: ${{ inputs.releaseVersion }}
      DEVELOPMENT_VERSION: ${{ inputs.nextDevelopmentVersion }}
      RELEASE_BRANCH: ${{ inputs.releaseBranch != '' && inputs.releaseBranch || format('release-{0}', inputs.releaseVersion) }}
      PUSH_CHANGES: ${{ inputs.pushReleaseArtifacts }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.RELEASE_BRANCH }}
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2.4.3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_PUB;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_DEPLOYMENT_USR;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_DEPLOYMENT_PSW;
            secret/data/products/zeebe/ci/zeebe ARTIFACTS_USR;
            secret/data/products/zeebe/ci/zeebe ARTIFACTS_PSW;
      - name: Git User Setup
        shell: bash
        run: |
          git config --global user.email "github-actions[release]"
          git config --global user.name "github-actions[release]@users.noreply.github.com"
      - name: Install Maven Central GPG Key
        shell: bash
        # setup-maven supports this as well but needs the key in the armor ascii format,
        # while we only have it plain bas64 encoded
        # see https://github.com/actions/setup-java/issues/100#issuecomment-742679976
        run: |
          echo -n "${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC }}" \
            | base64 --decode \
            | gpg -q --allow-secret-key-import --import --no-tty --batch --yes
          echo -n "${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PUB }}" \
            | base64 --decode \
            | gpg -q --import --no-tty --batch --yes
      - name: Setup Zeebe Build Tooling
        uses: ./.github/actions/setup-zeebe
      - name: Additional Go tooling setup
        shell: bash
        run: |
          go install github.com/go-bindata/go-bindata/...@v3
          if ! command -v go-bindata > /dev/null 2>&1; then
            echo "Failed to install go-bindata, go-bindata is not available on the path"
            exit 1
          fi

          go install github.com/smola/gocompat/...@v0.3.0
          if ! command -v gocompat > /dev/null 2>&1; then
            echo "Failed to install gocompat, gocompat is not available on the path"
            exit 1
          fi
      - name: Set and commit Go Client version
        shell: bash
        run: |
          pushd clients/go/internal/embedded
          echo "${RELEASE_VERSION}" > data/VERSION
          go-bindata -pkg embedded -o embedded.go -prefix data data/

          git commit -am "build(project): update go embedded version data"
          if [ "$PUSH_CHANGES" = "true" ]; then
            git push origin "${RELEASE_BRANCH}"
          fi
      - name: Build Go Client
        uses: ./.github/actions/build-zeebe
        with:
          java: false
      - uses: s4u/maven-settings-action@v2.8.0
        with:
          servers: |
            [{
                "id": "camunda-nexus",
                "username": "${{ steps.secrets.outputs.ARTIFACTS_USR }}",
                "password": "${{ steps.secrets.outputs.ARTIFACTS_PSW }}"
            },
            {
                "id": "central",
                "username": "${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_USR }}",
                "password": "${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_PSW }}"
            }]
      - name: Maven Release
        id: maven-release
        shell: bash
        env:
          SKIP_REPO_DEPLOY: ${{ inputs.pushReleaseArtifacts == 'false' }}
        run : |
          # This var is used to include the previously built go artifacts into the final maven release build.
          # As the maven build of the tag happens in a sub-directory to which maven checks out the release tag to build it.
          # see https://maven.apache.org/maven-release/maven-release-plugin/perform-mojo.html#workingDirectory
          export ZBCTL_ROOT_DIR=${PWD}
          mvn release:prepare release:perform -B \
            -Dgpg.passphrase="${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}" \
            -Dresume=false \
            -Dtag=${RELEASE_VERSION} \
            -DreleaseVersion=${RELEASE_VERSION} \
            -DdevelopmentVersion=${DEVELOPMENT_VERSION} \
            -DpushChanges=${PUSH_CHANGES} \
            -DremoteTagging=${PUSH_CHANGES} \
            -DlocalCheckout=${{ inputs.pushReleaseArtifacts == 'false' }} \
            -DcompletionGoals="spotless:apply" \
            -P-autoFormat \
            -Darguments='-T1C -P-autoFormat -DskipChecks=true -DskipTests=true -Dspotless.apply.skip=false -Dskip.central.release=${SKIP_REPO_DEPLOY} -Dskip.camunda.release=${SKIP_REPO_DEPLOY} -Dzbctl.force -Dzbctl.rootDir=${ZBCTL_ROOT_DIR} -Dgpg.passphrase="${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}"'

          # switch to the directory to which maven checks out the release tag
          # see https://maven.apache.org/maven-release/maven-release-plugin/perform-mojo.html#workingDirectory
          pushd target/checkout
          export TAG_REVISION=$(git log -n 1 --pretty=format:'%h')
          echo "tagRevision=${TAG_REVISION}" >> $GITHUB_OUTPUT
          popd
      - name: Cleanup Maven Central GPG Key
        # make sure we always remove the imported signing key to avoid it leaking on runners
        if: always()
        shell: bash
        run: rm -rf $HOME/.gnupg
