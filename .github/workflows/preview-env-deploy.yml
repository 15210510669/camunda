---
name: deploy-preview-env
on:
  push:
    branches:
      - 'master'
      - 'stable/**'
  pull_request:
    types: [ labeled,synchronize ]

jobs:
  deploy-preview:
    # checks whether it was a push event = master or stable branch || check that the PR isn't closed AND (check whether the labeled event was deploy-preview || check whether on new commit of PR the label deploy-preview exists)
    if: github.event_name == 'push' || (github.event.pull_request.state != 'closed' && (github.event.label.name == 'deploy-preview' || contains( github.event.pull_request.labels.*.name, 'deploy-preview')))
    runs-on: ubuntu-22.04
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }} # head_ref = branch on PR, ref_name if master / stable/**
    concurrency:
      group: pr-update-${{ github.head_ref || github.ref_name }} # env is not yet available here
      cancel-in-progress: true

    steps:
    #########################################################################
    # Sanitize the branch name to remove dependabot/,renovate/ and transform the name
    - id: sanitize
      uses: camunda/infra-global-github-actions/sanitize-branch-name@main
      with:
        branch: ${{ env.BRANCH_NAME }}
        max_length: '50'
    #########################################################################
    # Setup: import secrets from vault
    - name: Import secrets
      id: secrets
      uses: hashicorp/vault-action@a5f6c67fe15332606c72ea39aade385a3436f224
      with:
        url: ${{ secrets.VAULT_ADDR }}
        method: approle
        roleId: ${{ secrets.VAULT_ROLE_ID }}
        secretId: ${{ secrets.VAULT_SECRET_ID }}
        secrets: |
          secret/data/products/operate/ci/operate ARGOCD_TOKEN;
    #########################################################################
    # Setup: checkout code. This is required because we are using
    # composite actions and deployment manifests.
    - name: Checkout
      uses: actions/checkout@v4
    #########################################################################
    # Determine the argocd arguments that need to be passed to the create app command
    - name: Determine Argocd Arguments
      shell: bash
      run: |
        echo "argocd_arguments=--dest-namespace ${app_name} \
        --file .ci/preview-environments/argo/application.yml \
        --helm-set camunda-platform.operate.image.tag=${docker_tag} \
        --helm-set git.branch=${revision} \
        --helm-set global.labels.app=${app_name} \
        --name ${app_name} \
        --revision ${revision} \
        --upsert" >> $GITHUB_ENV
      env:
        docker_tag: "ci-${{ github.event.pull_request.head.sha || github.sha }}" # commit id of latest PR event || sha of push event
        revision: ${{ env.BRANCH_NAME }}
        app_name: operate-${{ steps.sanitize.outputs.branch_name == 'master' && 'stage' || steps.sanitize.outputs.branch_name }}
      #########################################################################
    # Create a preview environment
    - name: Deploy Preview Environment
      uses: camunda/infra-global-github-actions/preview-env/create@main
      with:
        revision: ${{ env.BRANCH_NAME }}
        argocd_token: ${{ steps.secrets.outputs.ARGOCD_TOKEN }}
        app_name: operate-${{ steps.sanitize.outputs.branch_name == 'master' && 'stage' || steps.sanitize.outputs.branch_name }}
        app_url: https://${{ steps.sanitize.outputs.branch_name == 'master' && 'stage' || steps.sanitize.outputs.branch_name }}.operate.camunda.cloud
        argocd_arguments: ${{ env.argocd_arguments }}
  clean:
    if: always() && github.event_name == 'pull_request' && needs.deploy-preview.result != 'skipped'
    uses: camunda/operate/.github/workflows/preview-env-clean.yml@master
    needs:
    - deploy-preview
    secrets: inherit
    with:
      pull-request: ${{ github.event.pull_request.number }}
      
