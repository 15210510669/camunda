name: QA Testbench run

on:
  workflow_dispatch:
    inputs:
      generation:
        description: 'Specifies the generation template which should be used by the testbench run'
        required: false
        default: 'Zeebe SNAPSHOT'
        type: string
      branch:
        description: 'Specifies the branch, for which the QA Testbench run should be executed'
        default: 'main'
        required: false
        type: string
  workflow_call:
    inputs:
      generation:
        description: 'Specifies the generation template which should be used by the testbench run'
        required: false
        default: 'Zeebe SNAPSHOT'
        type: string
      branch:
        description: 'Specifies the branch, for which the QA Testbench run should be executed'
        default: 'main'
        required: false
        type: string

jobs:

  prepare:
    # variables in qa job cannot read env variable. So we are building buildUrl here as output so it can be re-used in both qa, wait and notify jobs
    name: prepare
    runs-on: ubuntu-latest
    outputs:
      buildUrl: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: prepare variables
        id: generate
        run: exit 0

  qa:
    needs: prepare
    name: Run testbench process
    uses: ./.github/workflows/testbench.yaml
    with:
      processId: external-tool-integration
      variables: >
        {
        \"zeebeImage\": \"$IMAGE\",
        \"generationTemplate\": \"${{ inputs.generation }}\",
        \"channel\": \"Internal Dev\",
        \"branch\": \"${{ inputs.branch }}\",
        \"build\":  \"${{ needs.prepare.outputs.buildUrl }}\",
        \"businessKey\": \"${{ needs.prepare.outputs.buildUrl }}\",
        \"processId\": \"qa-protocol\"
        }
    secrets: inherit

  wait:
    needs: [qa, prepare]
    name: Wait until test is completed
    runs-on: ubuntu-latest
    steps:
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2.4.3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/zeebe/ci/zeebe TESTBENCH_PROD_CLIENT_SECRET;
            secret/data/products/zeebe/ci/zeebe TESTBENCH_PROD_CONTACT_POINT;

      - run: |
          businessKey="${{ env.BUILD_URL }}"

          echo "Waiting for result of $businessKey"
          jobKey=""

          while true; do
            # activate jobs non-zero exits can be ignored with `<command> || true`
            "${zbctl}" activate jobs "$businessKey" > activationresponse.txt 2>/dev/null || true
            jobKey=$(jq -r '.jobs[0].key' < activationresponse.txt)

            if [[ -z "$jobKey" || "$jobKey" == "null" ]]; then
              echo "Still waiting"
              sleep 5m
            else
              echo "QA run completed"
              break
            fi
          done

          echo "Job key is: $jobKey"
          variables=$(jq -r '.jobs[0].variables' < activationresponse.txt)
          echo "Job variables are: $variables"

          testResult=$(echo "$variables" | jq -r '.aggregatedTestResult')
          echo "Test result is: $testResult"

          "${zbctl}" complete job "$jobKey"

          if [ "$testResult" == "FAILED" ]; then
            echo "Test failed"
            exit 1
          else
            echo "Test passed or skipped"
            exit 0
          fi
        env:
          ZEEBE_CLIENT_SECRET: ${{ steps.secrets.outputs.TESTBENCH_PROD_CLIENT_SECRET }}
          ZEEBE_ADDRESS: ${{ steps.secrets.outputs.TESTBENCH_PROD_CONTACT_POINT }}
          ZEEBE_AUTHORIZATION_SERVER_URL: 'https://login.cloud.ultrawombat.com/oauth/token'
          ZEEBE_CLIENT_ID: 'S7GNoVCE6J-8L~OdFiI59kWM19P.wvKo'
          BUILD_URL: ${{ needs.prepare.outputs.buildUrl }}

  notify:
    name: Send slack notification
    runs-on: ubuntu-latest
    needs: [ wait, prepare ]
    if: ${{ always() }}
    steps:
      - id: slack-failure-notify
        name: Send failure slack notification
        uses: slackapi/slack-github-action@v1.23.0
        if: ${{ always() && needs.qa-testbench.result != 'success' }}
        with:
          payload: |
            {
              "text": ":alarm: QA run on `${{ inputs.branch }}` with generation template `${{ inputs.generation }}` failed! :alarm:\n ${{ needs.prepare.outputs.buildUrl }}",
             	"blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":alarm: QA run on `${{ inputs.branch }}` with generation template `${{ inputs.generation }}` failed! :alarm:"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please check: ${{ needs.prepare.outputs.buildUrl }}\n \\cc @zeebe-medic"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - id: slack-success-notify
        name: Send success slack notification
        uses: slackapi/slack-github-action@v1.23.0
        if: ${{ always() && needs.qa-testbench.result == 'success' }}
        with:
          payload: |
            {
              "text": ":tada: QA run succeeded on `${{ inputs.branch }}` with generation template `${{ inputs.generation }}`! :tada:\n ${{ needs.prepare.outputs.buildUrl }}",
             	"blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":tada: QA run succeeded on `${{ inputs.branch }}` with generation template `${{ inputs.generation }}`! :tada:"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Nothing to check today. Good job! :clap:\n"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
