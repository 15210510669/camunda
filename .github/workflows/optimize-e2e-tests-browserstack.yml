name: Optimize E2E tests - browserstack

on:
  workflow_dispatch:
  schedule:
    - cron: "0 23 * * 1-5"

permissions:
  contents: read # for git clone
  id-token: write # for authenticating with GCP

jobs:
  e2e-tests:
    name: E2E tests
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Import secrets
        id: secrets
        uses: hashicorp/vault-action@d1720f055e0635fd932a1d2a48f87a666a57906c # v3.0.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/optimize/ci/jenkins AUTH0_CLIENTSECRET;
            secret/data/products/optimize/ci/jenkins AUTH0_USEREMAIL;
            secret/data/products/optimize/ci/jenkins AUTH0_USERPASSWORD;
            secret/data/products/optimize/ci/jenkins BROWSERSTACK_USERNAME;
            secret/data/products/optimize/ci/jenkins BROWSERSTACK_ACCESS_KEY;
            secret/data/products/optimize/ci/camunda-optimize SLACK_BOT_URL;

      - name: Login to Harbor registry
        uses: ./.github/actions/login-registry
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: "Parse pom.xml for versions"
        id: "pom_info"
        uses: YunaBraska/java-info-action@main

      - name: Setup yarn cache
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
        with:
          node-version: ${{ steps.pom_info.outputs.x_version_node }}
          cache: "yarn"
          cache-dependency-path: client/yarn.lock

      - name: Install node dependencies
        working-directory: ./client
        run: yarn install

      - name: Setup Maven
        uses: ./.github/actions/setup-maven
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Login to Google Cloud
        uses: ./.github/actions/login-gcloud
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Build backend & frontend
        run: mvn clean install -DskipTests -Dskip.docker -pl backend,qa/data-generation -am

      - name: Start Postgress, Engine and Elasticsearch
        uses: ./.github/actions/compose
        with:
          compose_file: ${{ github.workspace }}/client/docker-compose.yml
          project_name: e2e
          additional_flags: "--profile platform"

      - name: Download and restore dump
        uses: ./.github/actions/restore-dump
        with:
          sql_dump: "optimize_data-e2e.sqlc"

      - name: Create backend logs file
        run: mkdir -p ./client/build && touch ./client/build/backendLogs.log

      - name: Start back-end
        working-directory: ./client
        run: |
          yarn run start-backend ci &> ./build/backendLogs.log &

      - name: Start front-end
        working-directory: ./client
        run: yarn start &

      - name: Wait for import to complete
        run: ./.github/scripts/wait-for.sh http://localhost:8100/api/importCompleted

      - name: Wait for front-end to start
        run: ./.github/scripts/wait-for.sh http://localhost:3000/ready

      - name: Run tests
        working-directory: ./client
        env:
          BROWSERSTACK_USERNAME: "${{ steps.secrets.outputs.BROWSERSTACK_USERNAME }}"
          BROWSERSTACK_ACCESS_KEY: "${{ steps.secrets.outputs.BROWSERSTACK_ACCESS_KEY }}"
        run: yarn run e2e:ci-browserstack

      - name: Upload logs
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4
        if: always()
        with:
          name: logs
          path: ./client/build/*.log

      - name: Docker log dump
        uses: ./.github/actions/docker-logs
        if: always()
        with:
          archive_name: e2e-browserstack-docker-logs

      - name: Post results on slack
        if: failure() && github.event_name != 'schedule'
        uses: ./.github/actions/notify-on-slack
        with:
          slack_webhook_url: ${{ steps.secrets.outputs.SLACK_BOT_URL}}
          status: ${{ job.status }}
