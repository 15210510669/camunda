---
name: Deploy

description: Deploys a Optimize stage and persistent environments.

inputs:
  deployment_id:
    description: >-
      Identifier for this deployment. Could look like "coffee-and-cigarettes" or "pr-1337".
      It MUST be unique.
      Providing the wrong identifier here might lead to other deployments/namespaces being overwritten.
      The name provided here will be prefixed with "optimize-".
      Example: deployment_id="foo" --> namespace "optimize-foo"
      Since optimize have only 2 envs, the possible values here are: stage and persistent
    required: false
    default: ${{ github.branch }}

  deployment_ref:
    description: >-
      When step='stop', this is supposed to contain the branch name that will be used to lookup the actual Argo CD deployment name.
      Typically it's populated using `github.event.ref`.
      Example: `deployment_ref="foo" --> deployment_id "foo"` (currently)
    required: false
    default: ${{ github.event.ref }}

  revision:
    description: Revision or branch of the Optimize Helm chart. Typically the branch to be deployed, or `master`.
    required: true

  es_version:
    description: ES Docker tag to deploy.
    required: true

  zeebe_version:
    description: Zeebe Docker tag to deploy.
    required: true

  identity_version:
    description: Identity Docker tag to deploy.
    required: true

  cambpm_version:
    description: CAMBPM tag to deploy
    required: true

  argocd_server:
    description: Url of the Argo CD instance to target.
    required: false
    default: argocd.int.camunda.com

  argocd_token:
    description: An Argo CD token with sufficient permissions to create Applications.
    required: true

  argocd_version:
    default: v2.3.1
    description: Version tag of Argo CD CLI tool
    required: false
runs:
  using: composite
  steps:
    - name: Echo inputs
      shell: bash
      run: |
        echo "Inputs"
        echo "-----"
        echo "Deployment ID / App Name: ${{ inputs.deployment_id }}"
        echo "Chart revision:           ${{ inputs.revision }}"
        echo "Lifecycle step:           ${{ inputs.step }}"
    - name: Restore cache
      uses: actions/cache@v3
      id: tool-cache-argocd
      with:
        path: /usr/local/bin/argocd
        key: ${{ runner.os }}-tool-cache-argo-${{ inputs.argocd_version }}
    - name: Setup Argo CD
      shell: bash
      if: ${{ steps.tool-cache-argocd.outputs.cache-hit != 'true' }}
      run: |-
        curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/${{ inputs.argocd_version }}/argocd-linux-amd64
        chmod +x /usr/local/bin/argocd
        argocd version
      env:
        ARGOCD_AUTH_TOKEN: ${{ inputs.argocd_token }}
        ARGOCD_OPTS: "--grpc-web"
        ARGOCD_SERVER: ${{ inputs.argocd_server  }}
    - name: Determine APP_NAME
      shell: bash
      run: |-
        APP_NAME="optimize-${{ inputs.deployment_id }}"
        echo "APP_NAME=${APP_NAME}" >> ${GITHUB_ENV}
      env:
        ARGOCD_AUTH_TOKEN: ${{ inputs.argocd_token }}
        ARGOCD_OPTS: "--grpc-web"
        ARGOCD_SERVER: ${{ inputs.argocd_server  }}
      #########################################################################
      # Create a GitHub deployment that points to the URL we're going to deploy to.
      # If a Pull Request exists, it will show the status of this deployment.
    - uses: bobheadxi/deployments@9d4477fdaa4120020cd10ab7e97f68c801422e73
      name: Create GitHub deployment
      id: deployment
      with:
        step: start
        token: "${{ github.token }}"
        env: ${{ env.APP_NAME }}
    - name: Deploy
      shell: bash
      run: >-
        .github/actions/deploy-env/deploy_script.sh
      env:
        ARGOCD_AUTH_TOKEN: ${{ inputs.argocd_token }}
        ARGOCD_OPTS: "--grpc-web"
        ARGOCD_SERVER: ${{ inputs.argocd_server  }}
        APP_NAME: ${{ env.APP_NAME }}
        CAMBPM_VERSION: ${{ inputs.cambpm_version }}
        ES_VERSION: ${{ inputs.es_version }}
        ZEEBE_VERSION: ${{ inputs.zeebe_version }}
        IDENTITY_VERSION: ${{ inputs.identity_version }}
        REVISION: ${{ inputs.revision }}
        SHA: ${{ github.sha }}
    - name: Wait for sync (up to 15 minutes)
      shell: bash
      run: |-
        echo "::group::wait for sync"
        if [[ ${{ env.APP_NAME }} == "optimize-stage" ]];
        then  
          argocd app wait ${{ env.APP_NAME }} c8-${{ env.APP_NAME }} --timeout 900 --health --sync
        else 
          argocd app wait ${{ env.APP_NAME }} --timeout 900 --health --sync
        fi
        
        echo "::endgroup::"
      env:
        ARGOCD_AUTH_TOKEN: ${{ inputs.argocd_token }}
        ARGOCD_OPTS: "--grpc-web"
        ARGOCD_SERVER: ${{ inputs.argocd_server  }}
      #########################################################################
      # Update the deployment status so we can see the result in the Pull Request
      # or in the list of environments.
    - name: Update branch deployment status
      # When running the "start" step, `always()` ensures that the deployment status
      # is updated regardless of previous steps failing.
      if: always()
      uses: bobheadxi/deployments@9d4477fdaa4120020cd10ab7e97f68c801422e73
      with:
        step: finish
        token: ${{ github.token }}
        status: ${{ job.status }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
        env: ${{ steps.deployment.outputs.env }}
        env_url: https://${{ inputs.deployment_id }}.optimize.camunda.cloud
