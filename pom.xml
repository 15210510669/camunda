<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.camunda.optimize</groupId>
  <artifactId>parent</artifactId>
  <version>7.20.0-SNAPSHOT</version>
  <packaging>pom</packaging>
  <name>Camunda Optimize</name>

  <modules>
    <!-- client should be built before distro -->
    <module>client</module>
    <module>util</module>
    <module>plugins</module>
    <module>backend</module>
    <module>qa</module>
    <module>distro</module>
    <module>upgrade</module>
    <module>test-coverage</module>
  </modules>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <project.previousVersion>3.10.5</project.previousVersion>

    <camunda.engine.version>7.18.0</camunda.engine.version>
    <camunda.maven.artifacts.version>7.18.11-ee</camunda.maven.artifacts.version>

    <!-- We use this version to compile but run IT against containers with zeebe.docker.version -->
    <zeebe.version>8.3.0-alpha6</zeebe.version>
    <identity.version>8.3.0-alpha6</identity.version>
    <!-- We use this for the Zeebe test container version only -->
    <zeebe.docker.version>${zeebe.version}</zeebe.docker.version>

    <surefire-plugin.version>3.1.2</surefire-plugin.version>
    <!-- maven plugins -->
    <plugin.version.sonar>3.10.0.2594</plugin.version.sonar>

    <jackson.version>2.15.2</jackson.version>
    <jsonpath.version>2.8.0</jsonpath.version>
    <elasticsearch.version>7.17.13</elasticsearch.version>
    <!-- The default es 8 version we are going to be testing with-->
    <elasticsearch8.test.version>8.7.0</elasticsearch8.test.version>
    <!--The least supported elasticsearch version we should test against-->
    <elasticsearch.test.version>7.10.0</elasticsearch.test.version>
    <!--the ElasticSearch version of the previous Optimize version -->
    <previous.optimize.elasticsearch.version>7.10.0</previous.optimize.elasticsearch.version>
    <!-- https://www.elastic.co/guide/en/elasticsearch/client/java-api/6.5/_using_another_logger.html -->
    <elasticsearch.log4j.version>2.20.0</elasticsearch.log4j.version>
    <guava.version>32.1.2-jre</guava.version>
    <spring.boot.version>3.0.10</spring.boot.version>
    <spring.version>6.0.12</spring.version>
    <mockito.version>5.5.0</mockito.version>
    <mockito-inline.version>5.2.0</mockito-inline.version>
    <httpclient.version>4.5.14</httpclient.version>
    <junit.jupiter.version>5.10.0</junit.jupiter.version>
    <junit.platform.version>1.10.0</junit.platform.version>
    <mockserver.version>5.15.0</mockserver.version>
    <quartz.version>2.3.2</quartz.version>
    <assertj.version>3.24.2</assertj.version>
    <postgres.version>42.6.0</postgres.version>
    <jakarta.rs-api.version>3.1.0</jakarta.rs-api.version>

    <lombok.version>1.18.28</lombok.version>
    <logback.version>1.4.11</logback.version>
    <slf4j.version>2.0.9</slf4j.version>

    <version.node>v16.16.0</version.node>
    <version.yarn>v1.22.18</version.yarn>

    <skipTests>false</skipTests>
    <skip.unit.tests>${skipTests}</skip.unit.tests>
    <skip.docker>false</skip.docker>
    <docker.compose.file>docker-compose.yml</docker.compose.file>

    <sonar.organization>camunda</sonar.organization>
    <sonar.host.url>https://sonarcloud.io</sonar.host.url>
    <aggregate.report.dir>test-coverage/target/site/jacoco-aggregate/jacoco.xml</aggregate.report.dir>
    <sonar.junit.reportPaths>
      ${project.build.directory}/surefire-reports/,${project.build.directory}/failsafe-reports/,${project.build.directory}/failsafe-reports/1/,${project.build.directory}/failsafe-reports/2/,${project.build.directory}/failsafe-reports/3/,${project.build.directory}/failsafe-reports/4/
    </sonar.junit.reportPaths>
    <h2.version>2.2.224</h2.version>

    <maven.compiler.target>17</maven.compiler.target>
    <maven.compiler.source>17</maven.compiler.source>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-framework-bom</artifactId>
        <version>${spring.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson</groupId>
        <artifactId>jackson-bom</artifactId>
        <version>${jackson.version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <profiles>

    <profile>
      <id>engine-latest</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
      </properties>
    </profile>

    <profile>
      <id>engine-snapshot</id>
      <properties>
        <!--
        Note: the below is intended for CI usage only, as part of
        engine_compatibility job.
        See also setCamBpmSnapshotVersion() in optimize-jenkins-shared-library.
        -->
        <camunda.engine.version>${env.CAMBPM_SNAPSHOT_VERSION}</camunda.engine.version>
      </properties>
    </profile>

    <profile>
      <id>engine-7.19</id>
      <properties>
        <camunda.engine.version>7.19.0</camunda.engine.version>
      </properties>
    </profile>

    <profile>
      <id>engine-7.18</id>
      <properties>
        <camunda.engine.version>7.18.0</camunda.engine.version>
      </properties>
    </profile>

    <profile>
      <id>release</id>
      <properties>
        <skip.docker>true</skip.docker>
        <maven.javadoc.skip>true</maven.javadoc.skip>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-release-plugin</artifactId>
            <version>3.0.1</version>
            <configuration>
              <releaseProfiles>engine-latest</releaseProfiles>
              <localCheckout>true</localCheckout>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-source-plugin</artifactId>
            <version>3.3.0</version>
            <executions>
              <execution>
                <id>attach-sources</id>
                <phase>package</phase>
                <goals>
                  <goal>jar-no-fork</goal>
                </goals>
              </execution>
              <execution>
                <id>attach-test-sources</id>
                <phase>package</phase>
                <goals>
                  <goal>test-jar-no-fork</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>nexus-staging-maven-plugin</artifactId>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>it</id>
      <properties>
        <skip.unit.tests>true</skip.unit.tests>
      </properties>
    </profile>

    <profile>
      <id>ccsm-it</id>
      <properties>
        <skip.unit.tests>true</skip.unit.tests>
      </properties>
    </profile>

    <profile>
      <id>coverage</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>prepare-agent</id>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- profile to perform only static code analysis using sonar scanner -->
    <profile>
      <id>sonar</id>
      <properties>
        <!-- sonarscanner integration -->
        <!-- sonar.login token must be passed at runtime to avoid sharing token -->
        <sonar.host.url>https://sonarcloud.io</sonar.host.url>
        <sonar.organization>camunda</sonar.organization>
        <sonar.projectKey>camunda_camunda-optimize</sonar.projectKey>
        <sonar.moduleKey>${project.artifactId}</sonar.moduleKey>
        <sonar.login>${env.SONARCLOUD_TOKEN}</sonar.login>
        <!-- sonar exclusions on duplication detection -->
        <!-- As part of our migration testing we have to c&p index classes to have their old state -->
        <!-- available during migration testing, we thus want to exlude them from duplication detection. -->
        <sonar.cpd.exclusions>**/org/camunda/optimize/upgrade/**/*Old.java</sonar.cpd.exclusions>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.sonarsource.scanner.maven</groupId>
            <artifactId>sonar-maven-plugin</artifactId>
            <version>${plugin.version.sonar}</version>
            <executions>
              <execution>
                <phase>verify</phase>
                <goals>
                  <goal>sonar</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

  </profiles>

  <dependencies>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Common test dependencies-->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-launcher</artifactId>
      <version>${junit.platform.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>${assertj.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-inline</artifactId>
      <version>${mockito-inline.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mock-server</groupId>
      <artifactId>mockserver-junit-jupiter</artifactId>
      <version>${mockserver.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.github.netmikey.logunit</groupId>
      <artifactId>logunit-core</artifactId>
      <version>2.0.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.github.netmikey.logunit</groupId>
      <artifactId>logunit-logback</artifactId>
      <version>2.0.0</version>
      <exclusions>
        <exclusion>
          <groupId>ch.qos.logback</groupId>
          <artifactId>logback-classic</artifactId>
        </exclusion>
      </exclusions>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpmime</artifactId>
      <version>${httpclient.version}</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <artifactId>commons-codec</artifactId>
          <groupId>commons-codec</groupId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <version>4.2.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-codec-http</artifactId>
      <version>4.1.97.Final</version>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>3.6.0</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>templating-maven-plugin</artifactId>
          <version>1.0.0</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>3.4.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.3.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${surefire-plugin.version}</version>
          <configuration>
            <skipTests>${skip.unit.tests}</skipTests>
            <redirectTestOutputToFile>true</redirectTestOutputToFile>
            <useModulePath>false</useModulePath>
            <argLine>--add-opens java.base/java.util=ALL-UNNAMED</argLine>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>org.junit.jupiter</groupId>
              <artifactId>junit-jupiter-engine</artifactId>
              <version>${junit.jupiter.version}</version>
            </dependency>
          </dependencies>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <version>${surefire-plugin.version}</version>
          <configuration>
            <redirectTestOutputToFile>true</redirectTestOutputToFile>
            <useModulePath>false</useModulePath>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.4.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>3.6.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>3.5.0</version>
          <configuration>
            <createDependencyReducedPom>false</createDependencyReducedPom>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>exec-maven-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-antrun-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.cargo</groupId>
          <artifactId>cargo-maven2-plugin</artifactId>
          <version>1.9.0</version>
        </plugin>
        <plugin>
          <groupId>org.sonatype.plugins</groupId>
          <artifactId>nexus-staging-maven-plugin</artifactId>
          <version>1.6.13</version>
          <extensions>true</extensions>
          <configuration>
            <serverId>camunda-nexus</serverId>
            <nexusUrl>https://artifacts.camunda.com/artifactory/</nexusUrl>
            <skipStaging>true</skipStaging>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>3.1.1</version>
        </plugin>
        <plugin>
          <groupId>com.github.eirslett</groupId>
          <artifactId>frontend-maven-plugin</artifactId>
          <version>1.14.0</version>
        </plugin>
        <plugin>
          <groupId>com.mycila</groupId>
          <artifactId>license-maven-plugin</artifactId>
          <version>4.2</version>
        </plugin>
        <!-- sonar relevant stuff -->
        <plugin>
          <groupId>org.sonarsource.scanner.maven</groupId>
          <artifactId>sonar-maven-plugin</artifactId>
          <version>${plugin.version.sonar}</version>
        </plugin>
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>0.8.10</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>com.amashchenko.maven.plugin</groupId>
        <artifactId>gitflow-maven-plugin</artifactId>
        <version>1.20.0</version>
        <configuration>
          <gitFlowConfig>
            <productionBranch>latest</productionBranch>
            <developmentBranch>master</developmentBranch>
            <supportBranchPrefix>maintenance/</supportBranchPrefix>
          </gitFlowConfig>
          <commitDevelopmentVersionAtStart>true</commitDevelopmentVersionAtStart>
          <useSnapshotInRelease>true</useSnapshotInRelease>
          <useSnapshotInSupport>true</useSnapshotInSupport>
          <skipTestProject>true</skipTestProject>
          <skipTag>true</skipTag>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.sonatype.plugins</groupId>
        <artifactId>nexus-staging-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.commonjava.maven.plugins</groupId>
        <artifactId>directory-maven-plugin</artifactId>
        <version>1.0</version>
        <executions>
          <execution>
            <id>directories</id>
            <goals>
              <goal>directory-of</goal>
            </goals>
            <phase>initialize</phase>
            <configuration>
              <property>parent.basedir</property>
              <project>
                <groupId>org.camunda.optimize</groupId>
                <artifactId>parent</artifactId>
              </project>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <configuration>
          <header>${parent.basedir}/license/header.txt</header>
          <includes>
            <include>**/*.java</include>
          </includes>
          <mapping>
            <java>SLASHSTAR_STYLE</java>
          </mapping>
        </configuration>
        <executions>
          <execution>
            <id>check-java-copyright</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.11.0</version>
        <configuration>
          <release>17</release>
        </configuration>
      </plugin>
    </plugins>

  </build>

  <distributionManagement>
    <snapshotRepository>
      <id>camunda-nexus</id>
      <url>https://artifacts.camunda.com/artifactory/camunda-optimize-snapshots/</url>
    </snapshotRepository>
    <repository>
      <id>camunda-nexus</id>
      <url>https://artifacts.camunda.com/artifactory/camunda-optimize/</url>
    </repository>
  </distributionManagement>

  <scm>
    <url>https://github.com/camunda/camunda-optimize</url>
    <connection>scm:git:https://${env.GITHUB_APP}:${env.GITHUB_ACCESS_TOKEN}@github.com/camunda/camunda-optimize.git
    </connection>
    <developerConnection>
      scm:git:https://${env.GITHUB_APP}:${env.GITHUB_ACCESS_TOKEN}@github.com/camunda/camunda-optimize.git
    </developerConnection>
    <tag>HEAD</tag>
  </scm>

  <issueManagement>
    <system>Jira</system>
    <url>https://app.camunda.com/jira/browse/OPT/</url>
  </issueManagement>

  <organization>
    <name>Camunda Services GmbH</name>
    <url>http://www.camunda.com</url>
  </organization>

  <!-- Fix for bug with downloading snapshots from Camunda Nexus using groups with RELEASE and SNAPSHOTS -->
  <repositories>
    <repository>
      <id>camunda-nexus</id>
      <name>Camunda Nexus</name>
      <url>https://artifacts.camunda.com/artifactory/internal/</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>

    <repository>
      <id>central</id>
      <name>Maven Central</name>
      <url>https://repo1.maven.org/maven2/</url>
    </repository>

    <!-- add the elasticsearch repo -->
    <repository>
      <id>elasticsearch-releases</id>
      <url>https://artifacts.elastic.co/maven</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
      <layout>default</layout>
    </repository>
  </repositories>

</project>
