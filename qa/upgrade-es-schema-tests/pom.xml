<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.camunda.optimize</groupId>
    <artifactId>qa</artifactId>
    <version>2.8.0-SNAPSHOT</version>
  </parent>

  <artifactId>upgrade-es-schema-tests</artifactId>
  <packaging>pom</packaging>

  <properties>
    <skip.tests>true</skip.tests>
    <!-- default amount with a fresh engine -->
    <upgrade.expected.activityInstance.count>21</upgrade.expected.activityInstance.count>
    <!-- default 30 minutes -->
    <upgrade.timeout.seconds>1800</upgrade.timeout.seconds>
    <upgrade.versions>${project.previousVersion},${project.version}</upgrade.versions>
  </properties>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <!-- 1. unpack Optimize versions -->
          <execution>
            <id>unpack</id>
            <goals>
              <goal>run</goal>
            </goals>
            <phase>pre-integration-test</phase>
            <configuration>
              <skip>${skip.tests}</skip>
              <target name="unpack optimize distributions">
                <!-- if executed in Jenkins, use settings.xml in Optimize root dir -->
                <property environment="env" />
                <condition property="maven-settings" value="--settings=${env.MAVEN_SETTINGS_XML}" else="">
                  <isset property="env.MAVEN_SETTINGS_XML" />
                </condition>
                <ac:for xmlns:ac="antlib:net.sf.antcontrib" list="${upgrade.versions}" param="currentVersion">
                  <sequential>
                    <echo message="Downloading &amp; unpacking Optimize @{currentVersion}..." />
                    <ac:if>
                      <matches string="@{currentVersion}" pattern="2\.[0-2]\.0" />
                      <ac:then>
                        <ac:var name="optimize.classifier" value="standalone" />
                      </ac:then>
                      <ac:else>
                        <ac:var name="optimize.classifier" value="production" />
                      </ac:else>
                    </ac:if>
                    <exec dir="${project.build.directory}/../../../" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="mvn dependency:unpack ${maven-settings} -pl qa/upgrade-es-schema-tests -Dartifact=org.camunda.optimize:camunda-optimize:@{currentVersion}:tar.gz:${optimize.classifier} -DoutputDirectory=./target/@{currentVersion} -DoverWriteReleases=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn" />
                    </exec>
                  </sequential>
                </ac:for>
              </target>
            </configuration>
          </execution>
          <!-- 2. Starting CamBPM and old ES through docker-compose -->
          <execution>
            <id>start-old-ES-and-CamBpm</id>
            <goals>
              <goal>run</goal>
            </goals>
            <phase>pre-integration-test</phase>
            <configuration>
              <skip>${skip.docker}</skip>
              <target name="Starting CamBpm and old ES through docker-compose" xmlns:ac="antlib:net.sf.antcontrib">
                <exec dir="${project.basedir}/../.." executable="/bin/bash" failonerror="true">
                  <arg value="-c" />
                  <arg value="docker-compose up -d --force-recreate --renew-anon-volumes" />
                  <env key="CAMBPM_VERSION" value="${camunda.engine.version}" />
                  <env key="ES_VERSION" value="${previous.optimize.elasticsearch.version}" />
                </exec>
              </target>
            </configuration>
          </execution>
          <!-- 3. Make sure CamBPM and ES are up and running -->
          <execution>
            <id>check-cambpm-is-up</id>
            <goals>
              <goal>run</goal>
            </goals>
            <phase>pre-integration-test</phase>
            <configuration>
              <skip>${skip.docker}</skip>
              <target name="check-cambpm-is-running" description="Check whether CamBPM is running">
                <echo message="Check ES is running..." />
                <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                  <socket server="localhost" port="9200" />
                </waitfor>
                <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                  <http url="http://localhost:9200/_cluster/state" />
                </waitfor>
                <echo message="ES is running." />
                <echo message="Check CamBPM is running..." />
                <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                  <socket server="localhost" port="8080" />
                </waitfor>
                <echo message="CamBPM is running." />
              </target>
            </configuration>
          </execution>
          <!-- 4. import the data to ElasticSearch from previous Optimize version -->
          <execution>
            <id>import-data-to-previous-Optimize</id>
            <goals>
              <goal>run</goal>
            </goals>
            <phase>pre-integration-test</phase>
            <configuration>
              <skip>${skip.tests}</skip>
              <target name="Import the data to the previous Optimize version">
                <!-- ensure elasticsearch is clean -->
                <echo message="Making sure that ElasticSearch is clean by wiping all data..." />
                <exec executable="/bin/bash" failonerror="true">
                  <arg value="-c" />
                  <arg value="curl -s -o /dev/null -w &quot;%{http_code}&quot; -f -XDELETE localhost:9200/_all" />
                </exec>
                <echo message="Successfully wiped all data!" />

                <echo message="Starting Optimize ${project.previousVersion}..." />
                <exec dir="${project.build.directory}/${project.previousVersion}/" executable="${project.build.directory}/${project.previousVersion}/optimize-startup.sh" spawn="true" />
                <echo message="Waiting for Optimize to start..." />
                <exec executable="/bin/bash" failonerror="true">
                  <arg value="-c" />
                  <arg value="until $(nc -zv localhost 8090); do sleep 2; done" />
                </exec>

                <echo message="Waiting for Optimize Import to finish..." />
                <exec executable="/bin/bash" failonerror="true">
                  <arg value="-c" />
                  <arg value="until test $(curl 'http://localhost:8090/api/status' | jq '.isImporting.&quot;camunda-bpm&quot;') = &quot;false&quot;; do sleep 2; done" />
                </exec>

                <echo message="Authenticating on optimize api..." />
                <exec dir="${project.build.directory}/${project.previousVersion}" executable="/bin/bash" failonerror="true">
                  <arg value="-c" />
                  <arg value="curl -s -w &quot;%{http_code}&quot; -f -H 'Content-Type: application/json' -XPOST localhost:8090/api/authentication --data-binary '{&quot;username&quot;:&quot;demo&quot;, &quot;password&quot;:&quot;demo&quot;}' -c authCookie -o authResponse" />
                </exec>

                <echo message="Reading all reports from optimize api..." />
                <exec dir="${project.build.directory}/${project.previousVersion}" executable="/bin/bash" failonerror="true">
                  <arg value="-c" />
                  <arg value="curl -s -o /dev/null -w &quot;%{http_code}&quot; -f http://localhost:8090/api/report?orderBy=lastModified -b authCookie" />
                </exec>

                <echo message="Killing Optimize ${project.previousVersion}..." />
                <exec executable="/bin/bash" failonerror="true">
                  <arg value="-c" />
                  <arg value="pkill -f org.camunda.optimize.Main" />
                </exec>
              </target>
            </configuration>
          </execution>
          <!-- 5. Start new ElasticSearch version with old data Copy old ES data folder to target -->
          <execution>
            <id>start-new-ES</id>
            <goals>
              <goal>run</goal>
            </goals>
            <phase>pre-integration-test</phase>
            <configuration>
              <skip>${skip.docker}</skip>
              <target name="Start new ES version" xmlns:ac="antlib:net.sf.antcontrib">

                <echo message="Copying data from old ES version to target folder" />
                <exec dir="${project.build.directory}" executable="/bin/bash" failonerror="true">
                  <arg value="-c" />
                  <arg value="docker cp elasticsearch:/usr/share/elasticsearch/data ${project.build.directory}/esdata" />
                </exec>

                <echo message="Stopping old ES..." />
                <exec dir="${project.basedir}/../.." executable="/bin/bash" failonerror="true">
                  <arg value="-c" />
                  <arg value="docker stop elasticsearch" />
                </exec>
                <echo message="Old ES is stopped." />

                <echo message="Create ES with new version" />
                <!-- The new ElasticSearch docker container will automatically mount the ES data folder -->
                <exec dir="${project.basedir}" executable="/bin/bash" failonerror="true">
                  <arg value="-c" />
                  <arg value="docker-compose up -d --force-recreate --renew-anon-volumes" />
                  <env key="ES_VERSION" value="${elasticsearch.version}" />
                </exec>
                <echo message="New ES successfully started." />
                <echo message="Waiting for ES to be fully up..." />
                <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                  <socket server="localhost" port="9200" />
                </waitfor>
                <waitfor maxwait="50" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                  <http url="http://localhost:9200/_cluster/health?wait_for_status=yellow&amp;timeout=10s" />
                </waitfor>
                <echo message="New ES is running." />
              </target>
            </configuration>
          </execution>
          <!-- 6. Perform migration -->
          <execution>
            <id>run-migration</id>
            <goals>
              <goal>run</goal>
            </goals>
            <phase>integration-test</phase>
            <configuration>
              <skip>${skip.tests}</skip>
              <target name="perform migration" xmlns:ac="antlib:net.sf.antcontrib">
                <echo message="Running migration to ${project.version}..." />
                <exec dir="${project.build.directory}/${project.version}" executable="/bin/bash">
                  <arg value="-c" />
                  <arg value="set -o pipefail; ./upgrade/upgrade.sh --skip-warning | sed 's/^/[OPTIMIZE MIGRATION SCRIPT ${project.version}]: /'" />
                </exec>
                  <echo message="Starting Optimize ${project.version}..." />
                  <exec dir="${project.build.directory}/${project.version}/" executable="${project.build.directory}/${project.version}/optimize-startup.sh" spawn="true" />
                  <echo message="Waiting for Optimize to start..." />
                  <exec executable="/bin/bash" failonerror="true">
                    <arg value="-c" />
                    <arg value="until $(nc -zv localhost 8090); do sleep 2; done" />
                  </exec>

                  <echo message="Waiting for Optimize Import to finish..." />
                  <exec executable="/bin/bash" failonerror="true">
                    <arg value="-c" />
                    <arg value="until test $(curl 'http://localhost:8090/api/status' | jq '.isImporting.&quot;camunda-bpm&quot;') = &quot;false&quot;; do sleep 2; done" />
                  </exec>

                  <echo message="Authenticating on optimize api..." />
                  <exec dir="${project.build.directory}/${project.version}" executable="/bin/bash" failonerror="true">
                    <arg value="-c" />
                    <arg value="curl -s -w &quot;%{http_code}&quot; -f -H 'Content-Type: application/json' -XPOST localhost:8090/api/authentication --data-binary '{&quot;username&quot;:&quot;demo&quot;, &quot;password&quot;:&quot;demo&quot;}' -c authCookie -o authResponse" />
                  </exec>

                  <echo message="Reading all reports from optimize api..." />
                  <exec dir="${project.build.directory}/${project.version}" executable="/bin/bash" failonerror="true">
                    <arg value="-c" />
                    <arg value="curl -s -o /dev/null -w &quot;%{http_code}&quot; -f http://localhost:8090/api/report?orderBy=lastModified -b authCookie" />
                  </exec>

                  <echo message="Killing Optimize ${project.version}..." />
                  <exec executable="/bin/bash" failonerror="true">
                    <arg value="-c" />
                    <arg value="pkill -f org.camunda.optimize.Main" />
                  </exec>
              </target>
            </configuration>
          </execution>
          <!-- 7. Cleanup: stop all docker containers -->
          <execution>
            <id>cleanup</id>
            <goals>
              <goal>run</goal>
            </goals>
            <phase>post-integration-test</phase>
            <configuration>
              <skip>${skip.docker}</skip>
              <target name="Stop docker container" xmlns:ac="antlib:net.sf.antcontrib">
                <echo message="Stopping CamBPM..." />
                <exec dir="${project.basedir}/../.." executable="/bin/bash" failonerror="true">
                  <arg value="-c" />
                  <arg value="docker-compose rm -sfv" />
                </exec>
                <echo message="CamBPM successfully stopped." />

                <echo message="Stopping new ES version..." />
                <exec dir="${project.basedir}" executable="/bin/bash" failonerror="true">
                  <arg value="-c" />
                  <arg value="docker-compose rm -sfv" />
                </exec>
                <echo message="New ES version successfully stopped." />
              </target>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>ant-contrib</groupId>
            <artifactId>ant-contrib</artifactId>
            <version>1.0b3</version>
            <exclusions>
              <exclusion>
                <groupId>ant</groupId>
                <artifactId>ant</artifactId>
              </exclusion>
            </exclusions>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>upgrade-es-schema-tests</id>
      <properties>
        <skip.tests>false</skip.tests>
        <skip.docker>false</skip.docker>
      </properties>
    </profile>
    <profile>
      <id>static-data-upgrade-es-schema-tests</id>
      <properties>
        <skip.tests>false</skip.tests>
        <!-- amount from the 2 million process instance sample data -->
        <upgrade.expected.activityInstance.count>21932786</upgrade.expected.activityInstance.count>
      </properties>
    </profile>
  </profiles>
</project>
