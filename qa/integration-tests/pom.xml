<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.camunda</groupId>
    <artifactId>tasklist-qa</artifactId>
    <version>8.2.0-SNAPSHOT</version>
  </parent>

  <name>Tasklist Integration Tests</name>
  <artifactId>tasklist-it-tests</artifactId>

  <dependencies>

    <dependency>
      <groupId>io.camunda</groupId>
      <artifactId>tasklist-webapp</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.camunda</groupId>
      <artifactId>tasklist-importer</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.camunda</groupId>
      <artifactId>tasklist-archiver</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.camunda</groupId>
      <artifactId>tasklist-qa-util</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- ELASTICSEARCH -->
    <dependency>
      <groupId>org.elasticsearch.client</groupId>
      <artifactId>elasticsearch-rest-high-level-client</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- TEST CONTAINERS -->
    <dependency>
      <groupId>io.zeebe</groupId>
      <artifactId>zeebe-test-container</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>elasticsearch</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.github.docker-java</groupId>
      <artifactId>docker-java-core</artifactId>
      <version>3.2.13</version>
      <scope>test</scope>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.glassfish/javax.json -->

    <dependency>
      <groupId>org.glassfish</groupId>
      <artifactId>javax.json</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Micrometer Prometheus -->
    <dependency>
  	  <groupId>io.micrometer</groupId>
  	  <artifactId>micrometer-registry-prometheus</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- TEST -->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-logging</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.junit.jupiter</groupId>
          <artifactId>junit-jupiter</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.junit.vintage</groupId>
          <artifactId>junit-vintage-engine</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.mockito</groupId>
          <artifactId>mockito-junit-jupiter</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>com.graphql-java-kickstart</groupId>
      <artifactId>graphql-spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <scope>test</scope>
    </dependency>
    
  </dependencies>

  <build>
    <testResources>
      <testResource>
        <directory>src/test/resources/</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>

    <plugins>

      <!-- LICENSE PLUGIN -->
      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <failIfNoTests>true</failIfNoTests>
          <systemPropertyVariables>
            <spring.profiles.active>test</spring.profiles.active>
          </systemPropertyVariables>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <failIfNoTests>true</failIfNoTests>
          <systemPropertyVariables>
            <spring.profiles.active>test</spring.profiles.active>
          </systemPropertyVariables>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.3.0</version>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

  <profiles>

    <profile>
      <id>docker</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <build>
        <plugins>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>docker-start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <skip>${skipTests}</skip>
                  <executable>docker-compose</executable>
                  <workingDirectory>..</workingDirectory>
                  <arguments>
                    <argument>up</argument>
                    <argument>-d</argument>
                    <argument>elasticsearch</argument>
                  </arguments>
                </configuration>
              </execution>

              <execution>
                <id>docker-stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <skip>${skipTests}</skip>
                  <executable>docker-compose</executable>
                  <workingDirectory>..</workingDirectory>
                  <arguments>
                    <argument>down</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>
    </profile>

  </profiles>

</project>
