<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <properties>
    <skip.tests>true</skip.tests>
    <old.optimize.elasticsearch.port>9250</old.optimize.elasticsearch.port>
    <new.optimize.elasticsearch.port>9200</new.optimize.elasticsearch.port>
    <elasticsearch.snapshot.path>/usr/share/elasticsearch/essnapshots</elasticsearch.snapshot.path>
  </properties>

  <parent>
    <groupId>org.camunda.optimize</groupId>
    <artifactId>upgrade-optimize-data</artifactId>
    <version>3.1.0-SNAPSHOT</version>
  </parent>

  <artifactId>post-migration-test</artifactId>
  <packaging>jar</packaging>

  <dependencies>

    <dependency>
      <groupId>org.camunda.optimize</groupId>
      <artifactId>optimize-backend</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <groupId>org.camunda.optimize</groupId>
      <artifactId>optimize-backend</artifactId>
      <version>${project.version}</version>
      <type>test-jar</type>
    </dependency>

  </dependencies>

  <profiles>
    <profile>
      <id>upgrade-optimize-data</id>
      <properties>
        <skip.tests>false</skip.tests>
        <skip.docker>false</skip.docker>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>

              <!-- 1. Start CamBPM and ES through docker-compose -->
              <execution>
                <id>start-old-new-ES-and-CamBpm</id>
                <goals>
                  <goal>run</goal>
                </goals>
                <phase>pre-integration-test</phase>
                <configuration>
                  <skip>${skip.docker}</skip>
                  <target name="Starting CamBpm and old ES through docker-compose">
                    <exec dir="${project.basedir}/../../.." executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="docker-compose up -d --force-recreate --renew-anon-volumes cambpm" />
                      <env key="CAMBPM_VERSION" value="${camunda.engine.version}" />
                    </exec>
                    <echo message="Create ES instances" />
                    <!-- The old ElasticSearch docker container will automatically mount the ES data folder -->
                    <exec dir="${project.basedir}" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="docker-compose up -d --force-recreate --renew-anon-volumes" />
                      <env key="NEW_ES_VERSION" value="${elasticsearch.version}" />
                      <env key="OLD_ES_VERSION" value="${previous.optimize.elasticsearch.version}" />
                      <env key="ELASTICSEARCH_SNAPSHOT_PATH" value="${elasticsearch.snapshot.path}" />
                    </exec>
                    <echo message="Create ES instances have been created." />
                  </target>
                </configuration>
              </execution>

              <!-- 2. Make sure CamBPM and ES are up and running -->
              <execution>
                <id>check-es-cambpm-is-up</id>
                <goals>
                  <goal>run</goal>
                </goals>
                <phase>pre-integration-test</phase>
                <configuration>
                  <skip>${skip.docker}</skip>
                  <target name="check-cambpm-is-running" description="Check whether CamBPM is running">

                    <echo message="Check CamBPM is running..." />
                    <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                      <socket server="localhost" port="8080" />
                    </waitfor>
                    <echo message="CamBPM is running." />

                    <echo message="Check new ES is running..." />
                    <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                      <socket server="localhost" port="${new.optimize.elasticsearch.port}" />
                    </waitfor>
                    <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                      <http url="http://localhost:${new.optimize.elasticsearch.port}/_cluster/state" />
                    </waitfor>
                    <echo message="New ES is running." />

                    <echo message="Old ES successfully started." />
                    <echo message="Waiting for old ES to be fully up..." />
                    <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                      <socket server="localhost" port="${old.optimize.elasticsearch.port}" />
                    </waitfor>
                    <waitfor maxwait="50" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                      <http url="http://localhost:${old.optimize.elasticsearch.port}/_cluster/health?wait_for_status=yellow&amp;timeout=10s" />
                    </waitfor>
                    <echo message="Old ES is running." />

                    <echo message="Make sure that ES can write data to the shared volume" />
                    <exec dir="${project.build.directory}" executable="/bin/bash">
                      <arg value="-c" />
                      <arg value="docker exec upgrade-optimize-data-tests-old-elasticsearch-version chown -R elasticsearch:elasticsearch ${elasticsearch.snapshot.path}" />
                    </exec>

                  </target>
                </configuration>
              </execution>

              <!--3. Generate engine data-->
              <execution>
                <id>generate-engine-data</id>
                <goals>
                  <goal>run</goal>
                </goals>
                <phase>pre-integration-test</phase>
                <configuration>
                  <target name="generate-engine-data" description="Generate process instances">
                    <property environment="env" />
                    <condition property="maven-settings" value="--settings=${env.MAVEN_SETTINGS_XML}" else="">
                      <isset property="env.MAVEN_SETTINGS_XML" />
                    </condition>

                    <echo message="Generating engine data..." />
                    <exec dir="${project.build.directory}/../../../../" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="set -o pipefail; mvn clean compile -pl qa/data-generation exec:java -Dexec.args='--numberOfProcessInstances 100 --numberOfDecisionInstances 100' -B ${maven-settings} -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn | sed 's/^/[ENGINE DATA GENERATION]: /'" />
                    </exec>
                  </target>
                </configuration>
              </execution>

              <!-- 4. Download and unpack optimize data generators with dependencies -->
              <execution>
                <id>download-and-unpack-generators</id>
                <goals>
                  <goal>run</goal>
                </goals>
                <phase>pre-integration-test</phase>
                <configuration>
                  <skip>${skip.tests}</skip>
                  <target name="download and unpack optimize data generators">
                    <!-- if executed in Jenkins, use settings.xml in Optimize root dir -->
                    <property environment="env" />
                    <condition property="maven-settings" value="--settings=${env.MAVEN_SETTINGS_XML}" else="">
                      <isset property="env.MAVEN_SETTINGS_XML" />
                    </condition>

                    <echo message="Downloading &amp; unpacking Optimize Report Generator ${project.previousVersion}..." />
                    <exec dir="${project.build.directory}/../../../../" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="mvn dependency:copy ${maven-settings} -f qa/upgrade-optimize-data/post-migration-test/pom.xml -Dartifact=org.camunda.optimize:generator:${project.previousVersion}:jar:jar-with-dependencies -DoutputDirectory=./target/generators -DoverWriteReleases=true -Dmdep.useBaseVersion=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn" />
                    </exec>
                    <echo message="Optimize ${project.previousVersion} generator successfully unpacked." />

                    <echo message="Downloading &amp; unpacking Optimize Report Generator ${project.version}..." />
                    <exec dir="${project.build.directory}/../../../../" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="mvn dependency:copy ${maven-settings} -f qa/upgrade-optimize-data/post-migration-test/pom.xml -Dartifact=org.camunda.optimize:generator:${project.version}:tar.gz:tar-with-dependencies -DoutputDirectory=./target/generators/${project.version} -DoverWriteReleases=true -Dmdep.useBaseVersion=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn" />
                    </exec>

                    <exec dir="${project.build.directory}/generators/${project.version}" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="tar -xf generator-${project.version}-tar-with-dependencies.tar.gz" />
                    </exec>
                  </target>
                </configuration>
              </execution>

              <!--5. Download and unpack Optimize versions -->
              <execution>
                <id>download-and-unpack-Optimize-versions</id>
                <goals>
                  <goal>run</goal>
                </goals>
                <phase>pre-integration-test</phase>
                <configuration>
                  <target name="download and unpack optimize distributions">
                    <!-- if executed in Jenkins, use settings.xml in Optimize root dir -->
                    <property environment="env" />
                    <condition property="maven-settings" value="--settings=${env.MAVEN_SETTINGS_XML}" else="">
                      <isset property="env.MAVEN_SETTINGS_XML" />
                    </condition>

                    <echo message="Downloading &amp; unpacking Optimize ${project.previousVersion}..." />
                    <exec dir="${project.build.directory}/../../../../" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="mvn dependency:unpack -B ${maven-settings} -f qa/upgrade-optimize-data -Dartifact=org.camunda.optimize:camunda-optimize:${project.previousVersion}:tar.gz:production -DoutputDirectory=${project.build.directory}/${project.previousVersion} -DoverWriteReleases=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn" />
                    </exec>
                    <echo message="Optimize ${project.previousVersion} successfully unpacked." />

                    <!-- Copy the license into Optimize directory-->
                    <exec dir="${project.build.directory}/../../../../" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="cp ./distro/src/environment/OptimizeLicense.txt ${project.build.directory}/${project.previousVersion}/environment/" />
                    </exec>

                    <echo message="Downloading &amp; unpacking Optimize ${project.version}..." />
                    <exec dir="${project.build.directory}/../../../../" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="mvn dependency:unpack -B ${maven-settings} -f qa/upgrade-optimize-data -Dartifact=org.camunda.optimize:camunda-optimize:${project.version}:tar.gz:production -DoutputDirectory=${project.build.directory}/${project.version} -DoverWriteReleases=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn" />
                    </exec>
                    <echo message="Optimize ${project.version} successfully unpacked." />

                    <!-- Copy the license into Optimize directory-->
                    <exec dir="${project.build.directory}/../../../../" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="cp ./distro/src/environment/OptimizeLicense.txt ${project.build.directory}/${project.version}/environment/" />
                    </exec>
                  </target>
                </configuration>
              </execution>

              <!--6. Start old Optimize, generate Data and kill Optimize-->
              <execution>
                <id>start-old-Optimize-and-run-data-generation</id>
                <goals>
                  <goal>run</goal>
                </goals>
                <phase>integration-test</phase>
                <configuration>
                  <target name="Start old Optimize, generate Data and kill Optimize">
                    <!-- if executed in Jenkins, use settings.xml in Optimize root dir -->
                    <property environment="env" />
                    <condition property="maven-settings" value="--settings=${env.MAVEN_SETTINGS_XML}" else="">
                      <isset property="env.MAVEN_SETTINGS_XML" />
                    </condition>

                    <echo message="Removing the default environment-config so we can overwrite the ES port..." />
                    <exec dir="${project.build.directory}/${project.previousVersion}" executable="/bin/bash">
                      <arg value="-c" />
                      <arg value="rm ./environment/environment-config.yaml" />
                    </exec>

                    <echo message="Starting the old Optimize version ${project.previousVersion}" />
                    <exec dir="${project.build.directory}/${project.previousVersion}/" executable="${project.build.directory}/${project.previousVersion}/optimize-startup.sh" spawn="true">
                      <env key="OPTIMIZE_ELASTICSEARCH_HTTP_PORT" value="${old.optimize.elasticsearch.port}" />
                    </exec>

                    <echo message="Wait for Optimize to start..." />
                    <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                      <socket server="localhost" port="8090" />
                    </waitfor>

                    <echo message="Waiting for Optimize to populate ES..." />
                    <exec executable="/bin/bash">
                      <arg value="-c" />
                      <arg value="until test $(curl -s -XPOST -H 'Content-Type: application/json' -d '{&quot;query&quot; : {&quot;bool&quot;: {&quot;must_not&quot;: {&quot;exists&quot;: {&quot;field&quot;: &quot;bpmn20Xml&quot;}}}}}' 'http://localhost:${old.optimize.elasticsearch.port}/optimize-process-instance/_count' | jq '.count // 0') -ge 100; do sleep 2; done" />
                    </exec>

                    <echo message="Generating optimize data" />
                    <exec executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="set -o pipefail; java -jar ${project.build.directory}/generators/generator-${project.previousVersion}-jar-with-dependencies.jar | sed 's/^/[OPTIMIZE DATA GENERATION]: /'" />
                    </exec>

                    <echo message="Killing Optimize ${project.previousVersion}..." />
                    <exec executable="/bin/bash">
                      <arg value="-c" />
                      <arg value="pkill -f org.camunda.optimize.Main" />
                    </exec>

                  </target>
                </configuration>
              </execution>

              <!-- 7. Copy the data from the old ES to the new ES instance -->
              <execution>
                <id>copy-data</id>
                <goals>
                  <goal>run</goal>
                </goals>
                <phase>integration-test</phase>
                <configuration>
                  <skip>${skip.tests}</skip>
                  <target name="Copy ES data">

                    <echo message="Create repository in old and new ES" />
                    <exec dir="${project.build.directory}" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="curl -X PUT localhost:${old.optimize.elasticsearch.port}/_snapshot/my_backup?pretty -H 'Content-Type: application/json' -d'{ &quot;type&quot;: &quot;fs&quot;, &quot;settings&quot;: { &quot;location&quot;: &quot;${elasticsearch.snapshot.path}&quot;, &quot;compress&quot;: false } }' " />
                    </exec>
                    <exec dir="${project.build.directory}" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="curl -X PUT localhost:${new.optimize.elasticsearch.port}/_snapshot/my_backup?pretty -H 'Content-Type: application/json' -d'{ &quot;type&quot;: &quot;fs&quot;, &quot;settings&quot;: { &quot;location&quot;: &quot;${elasticsearch.snapshot.path}&quot;, &quot;compress&quot;: false } }' " />
                    </exec>
                    <echo message="Repositories successfully created." />

                    <echo message="Create snapshot on old ES" />
                    <exec dir="${project.build.directory}" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="curl -X PUT localhost:${old.optimize.elasticsearch.port}/_snapshot/my_backup/snapshot_1?wait_for_completion=true" />
                    </exec>
                    <echo message="Snapshot successfully created." />

                    <!-- Both docker containers share a volume on ${elasticsearch.snapshot.path}. Thus, it's possible to immediately restore the snapshot. -->
                    <echo message="Restore snapshot on new ES" />
                    <exec dir="${project.build.directory}" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="curl -X POST localhost:${new.optimize.elasticsearch.port}/_snapshot/my_backup/snapshot_1/_restore?wait_for_completion=true" />
                    </exec>
                    <echo message="Snapshot successfully restored." />

                    <echo message="Deleting snapshot..." />
                    <exec dir="${project.build.directory}" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="curl -X DELETE localhost:${new.optimize.elasticsearch.port}/_snapshot/my_backup/snapshot_1?pretty" />
                    </exec>
                    <echo message="Snapshot deletion was successful." />

                  </target>
                </configuration>
              </execution>


              <!--7. Run migration, start new Optimize and run post migration tests -->
              <execution>
                <id>run-migration-start-new-Optimize-and-run-post-migration-tests</id>
                <goals>
                  <goal>run</goal>
                </goals>
                <phase>integration-test</phase>
                <configuration>
                  <target>
                    <!-- if executed in Jenkins, use settings.xml in Optimize root dir -->
                    <property environment="env" />
                    <condition property="maven-settings" value="--settings=${env.MAVEN_SETTINGS_XML}" else="">
                      <isset property="env.MAVEN_SETTINGS_XML" />
                    </condition>

                    <echo message="Removing the default environment-config so we can overwrite the ES port..." />
                    <exec dir="${project.build.directory}/${project.version}" executable="/bin/bash">
                      <arg value="-c" />
                      <arg value="rm ./environment/environment-config.yaml" />
                    </exec>

                    <echo message="Upgrade to the new Optimize version ${project.version}..." />
                    <exec dir="${project.build.directory}/${project.version}" executable="/bin/bash">
                      <arg value="-c" />
                      <arg value="set -o pipefail; ./upgrade/upgrade.sh --skip-warning | sed 's/^/[OPTIMIZE MIGRATION SCRIPT ${project.version}]: /'" />
                      <env key="OPTIMIZE_ELASTICSEARCH_HTTP_PORT" value="${new.optimize.elasticsearch.port}" />
                    </exec>
                    <echo message="Migration successfully completed." />

                    <echo message="Starting Optimize ${project.version}..." />
                    <exec dir="${project.build.directory}/${project.version}/" executable="${project.build.directory}/${project.version}/optimize-startup.sh" spawn="true">
                      <env key="OPTIMIZE_ELASTICSEARCH_HTTP_PORT" value="${new.optimize.elasticsearch.port}" />
                    </exec>
                    <echo message="Optimize successfully started." />

                    <echo message="Wait for Optimize to start..." />
                    <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                      <socket server="localhost" port="8090" />
                    </waitfor>
                    <echo message="Optimize successfully booted up." />

                    <echo message="Waiting for Optimize to populate ES..." />
                    <exec executable="/bin/bash">
                      <arg value="-c" />
                      <arg value="until test $(curl -s -XPOST -H 'Content-Type: application/json' -d '{&quot;query&quot; : {&quot;bool&quot;: {&quot;must_not&quot;: {&quot;exists&quot;: {&quot;field&quot;: &quot;bpmn20Xml&quot;}}}}}' 'http://localhost:${new.optimize.elasticsearch.port}/optimize-process-definition/_count' | jq '.count // 0') -eq 0; do sleep 2; done" />
                    </exec>
                    <echo message="ES is fully populated." />

                    <echo message="Running post migration tests..." />
                    <exec dir="${project.build.directory}/../../../../" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="set -o pipefail; mvn verify -DskipTests=false -B ${maven-settings} -f qa/upgrade-optimize-data -pl post-migration-test | sed 's/^/[POST MIGRATION TESTS]: /'" />
                    </exec>
                    <echo message="Post migration tests successfully completed." />

                    <!-- Generate additional data just to check if it's still possible-->
                    <echo message="Generating optimize data" />
                    <exec executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="set -o pipefail; java -cp &quot;${project.build.directory}/generators/${project.version}/lib/&quot; -jar ${project.build.directory}/generators/${project.version}/generator-${project.version}.jar | sed 's/^/[OPTIMIZE DATA GENERATION]: /'" />
                    </exec>

                    <echo message="Killing Optimize ${project.version}..." />
                    <exec executable="/bin/bash">
                      <arg value="-c" />
                      <arg value="pkill -f org.camunda.optimize.Main" />
                    </exec>

                  </target>
                </configuration>
              </execution>

              <!-- 8. Cleanup: stop all docker containers -->
              <execution>
                <id>cleanup</id>
                <goals>
                  <goal>run</goal>
                </goals>
                <phase>post-integration-test</phase>
                <configuration>
                  <skip>${skip.docker}</skip>
                  <target name="Stop docker container">
                    <echo message="Stopping CamBPM..." />
                    <exec dir="${project.basedir}/../../.." executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="docker-compose rm -sfv" />
                    </exec>
                    <echo message="CamBPM successfully stopped." />

                    <echo message="Stopping ES instances..." />
                    <exec dir="${project.basedir}" executable="/bin/bash" failonerror="true">
                      <arg value="-c" />
                      <arg value="docker-compose rm -sfv" />
                    </exec>
                    <echo message="ES instances successfully stopped." />
                  </target>
                </configuration>
              </execution>
            </executions>
            <dependencies>
              <dependency>
                <groupId>ant-contrib</groupId>
                <artifactId>ant-contrib</artifactId>
                <version>1.0b3</version>
                <exclusions>
                  <exclusion>
                    <groupId>ant</groupId>
                    <artifactId>ant</artifactId>
                  </exclusion>
                </exclusions>
              </dependency>
            </dependencies>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
