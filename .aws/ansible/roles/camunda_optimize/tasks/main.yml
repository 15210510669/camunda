---
- name: Ensure camunda group is present
  group:
    name: "{{ camunda_group }}"
    state: present

- name: Ensure camunda system user is present
  user:
    name: "{{ camunda_user }}"
    system: yes
    shell: "/sbin/nologin"
    group: "{{ camunda_group }}"
    createhome: no
    state: present

- name: Download tarball of Camunda Optimize
  get_url:
    url: "{{ nexus_url }}/service/local/artifact/maven/redirect?r=camunda-optimize-snapshots&g=org.camunda.optimize&a=camunda-optimize&v={{ camunda_optimize_version }}&c=full&e=tar.gz"
    dest: /tmp/camunda-optimize.tar.gz
    force: yes
    force_basic_auth: yes
    url_username: "{{ nexus_username }}"
    url_password: "{{ nexus_password }}"

- name: Ensure Camunda Optimize installation directory exists
  file:
    path: "{{ camunda_optimize_dir }}"
    owner: "{{ camunda_user }}"
    group: "{{ camunda_group }}"
    state: directory

- name: Unarchive tarball of latest Camunda Optimize
  unarchive:
    src: /tmp/camunda-optimize.tar.gz
    dest: "{{ camunda_optimize_dir }}"
    owner: "{{ camunda_user }}"
    group: "{{ camunda_group }}"
    remote_src: yes

- name: Configure Camunda Optimize (Camunda BPM Endpoint)
  template:
    src: environment/environment-config.yaml.j2
    dest: "{{ camunda_optimize_dir }}/environment/environment-config.yaml"
    owner: "{{ camunda_user }}"
    group: "{{ camunda_group }}"
    mode: 0644

- name: Configure Camunda Optimize Log level
  lineinfile:
    name: "{{ camunda_optimize_dir }}/environment/environment-logback.xml"
    regexp: '^.*logger name="org.camunda.optimize" level=.*'
    line: '<logger name="org.camunda.optimize" level="{{ optimize_log_level }}" />'
    insertbefore: '<root level.*>'

- name: Add Optimize license
  copy:
    content: "{{ optimize_license_key }}"
    dest: "{{ camunda_optimize_dir }}/environment/OptimizeLicense.txt"
    force: yes
    owner: "{{ camunda_user }}"
    group: "{{ camunda_group }}"
    mode: 0600


- name: Add New Relic java-agent start parameter to Optimize start script
  lineinfile:
    name: "{{ camunda_optimize_dir }}/start-optimize.sh"
    regexp: '(.*)-jar (.*)$'
    line: '\1-javaagent:/opt/newrelic/newrelic-agent-{{ newrelic_java_agent_version }}.jar -jar \2'
    backrefs: yes

- name: Set ownership of Camunda Optimize install directory to Camunda user {{ camunda_user }} and Camunda group {{ camunda_group }}
  file:
    path: "{{ camunda_optimize_dir }}"
    state: directory
    recurse: yes
    owner: "{{ camunda_user }}"
    group: "{{ camunda_group }}"

- name: Ensure Camunda Optimize systemd service unit exists
  template:
    src: etc/systemd/system/camunda-optimize.service.j2
    dest: /etc/systemd/system/camunda-optimize.service
    owner: root
    group: root
    mode: 0644

- name: Ensure Camunda Optimize systemd service is enabled and started
  systemd:
    name: camunda-optimize
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: Poll if Elasticsearch is ready
  uri:
    url: "http://{{ es_host }}:{{ es_http_port }}/{{ es_index }}"
  register: es
  until: es.status == 200
  retries: 10
  delay: 6

- name: Remove Optimize default admin user
  uri:
    url: http://{{ es_host }}:{{ es_http_port }}/optimize-users/_delete_by_query
    method: POST
    body: "{{ lookup('file', 'delete_admin_user.json') }}"
    body_format: json
    status_code: 200
