---
- hosts: all

  vars:
    db_host: "{{ DB_HOST | default('localhost') }}"
    db_name: "{{ DB_NAME | default('camunda') }}"
    db_port: "{{ DB_PORT | default('5432') }}"

  tasks:
    - name: Include variables
      include_vars:
        dir: 'group_vars/all'
      no_log: yes

    - debug:
        msg: "db_password is {{ db_password }}"

    - name: Clone 'camunda-bpm-platform'(master) project from Github
      git:
        repo: https://github.com/camunda/camunda-bpm-platform.git
        dest: ./tmp/camunda-bpm-platform

    - name: Get list of db-upgrade-scripts
      find:
        paths: ./tmp/camunda-bpm-platform/distro/sql-script/upgrade
        patterns: "^postgres_engine_7.6.*\\.sql$"
        use_regex: yes
      register: sqlscripts

    - block:
      - name: Install PostgreSQL 9.4 repository (Yum)
        yum:
          name: https://download.postgresql.org/pub/repos/yum/9.4/redhat/rhel-7-x86_64/pgdg-centos94-9.4-3.noarch.rpm
          state: present
      - name: Install PostgreSQL 9.4 client (Yum)
        yum:
          name: postgresql94.x86_64
          state: present
      when: ansible_pkg_mgr == 'yum'
      become: yes

    - block:
      - name: Install PostgreSQL repository signing key
        apt_key:
          id: ACCC4CF8
          url: "https://www.postgresql.org/media/keys/ACCC4CF8.asc"
          state: present
      - name: Install PostgreSQL 9.4 repository (Apt)
        apt_repository:
          repo: deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main
          state: present
          filename: 'postgresql'
      - name: Install PostgreSQL 9.4 client (Apt)
        apt:
          name: postgresql-client-9.4
          state: present
      when: ansible_pkg_mgr == 'apt'
      become: yes

    - name: Execute SQL upgrade scripts for PostgreSQL against RDS instance
      shell: psql -h '{{ db_host }}' -p '{{ db_port }}' -d '{{ db_name }}' -U '{{ db_username }}' -f '{{ item }}'
      with_items:
        - "{{ sqlscripts.files | sort(attribute='path') | map(attribute='path') | list }}"
      environment:
        PGPASSWORD: "{{ db_password }}"
      register: psql
      failed_when: "'ERROR' in psql.stderr"
