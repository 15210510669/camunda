[
  {
    "extension": "revapi.filter",
    "id": "filter",
    "configuration": {
      "archives": {
        "justification": "Ignore everything not included in the module itself",
        "include": ["io\\.camunda:zeebe-protocol:.*"]
      }
    }
  },
  {
    "extension": "revapi.differences",
    "id": "differences",
    "configuration": {
      "differences": [
        {
          "justification": "Upgrading the protocol version should be backwards compatible",
          "code": "java.field.constantValueChanged",
          "classQualifiedName": "io.camunda.zeebe.protocol.Protocol",
          "fieldName": "PROTOCOL_VERSION"
        },
        {
          "justification": "Upgrading the schema version should be backwards compatible",
          "code": "java.field.constantValueChanged",
          "fieldName": "SCHEMA_VERSION"
        },
        {
          "justification": "Ignore Enum order for BpmnElementType as ordinal() is not used and the elements are grouped in the enum.",
          "code": "java.field.enumConstantOrderChanged",
          "classQualifiedName": "io.camunda.zeebe.protocol.record.value.BpmnElementType"
        },
        {
          "justification": "Ignore new methods for Protocol Record interfaces, as these are not meant to be implemented but simply consumed; as such, new methods are perfectly fine to add",
          "code": "java.method.addedToInterface",
          "new": {
            "matcher": "java-package",
            "match": "/io\\.camunda\\.zeebe\\.protocol\\.record(\\..*)?/"
          }
        },
        {
          "justification": "Ignore Enum order for ValueType as ordinal() is not used",
          "code": "java.field.enumConstantOrderChanged",
          "classQualifiedName": "io.camunda.zeebe.protocol.record.ValueType"
        },
        {
          "justification": "Ignore the removal of this old BpmnElementType that was used for testing.",
          "code": "java.field.removed",
          "classQualifiedName": "io.camunda.zeebe.protocol.record.value.BpmnElementType",
          "fieldName": "TESTING_ONLY"
        },
        {
          "justification": "Ignore Enum order for AdminRequestType as ordinal() is not used",
          "code": "java.field.enumConstantOrderChanged",
          "classQualifiedName": "io.camunda.zeebe.protocol.record.AdminRequestType"
        },
        {
          "justification": "Adding optional fields to the end of the root block is backwards compatible",
          "code": "java.field.constantValueChanged",
          "regex": true,
          "classQualifiedName": "io.camunda.zeebe.protocol.record.AdminRequest(Decoder|Encoder)",
          "fieldName": "BLOCK_LENGTH",
          "oldValue": 3,
          "newValue": 5
        }
      ]
    }
  }
]
