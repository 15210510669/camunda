<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.camunda.optimize</groupId>
    <artifactId>parent</artifactId>
    <version>2.4.0-SNAPSHOT</version>
  </parent>

  <artifactId>upgrade-optimize</artifactId>

  <dependencies>

    <!-- Optimize dependencies -->
     <dependency>
      <groupId>org.camunda.optimize</groupId>
      <artifactId>optimize-commons</artifactId>
      <version>${project.version}</version>
    </dependency>

    <!-- Test dependencies-->
    <dependency>
      <groupId>org.camunda.optimize</groupId>
      <artifactId>optimize-backend</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${mockito.version}</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <plugins>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <filters>
                <filter>
                  <artifact>org.bouncycastle:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>org.camunda.optimize.upgrade.main.UpgradeMain</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <!-- to work around classloading bug on debian https://issues.apache.org/jira/browse/SUREFIRE-1588 -->
          <useSystemClassLoader>false</useSystemClassLoader>
          <classesDirectory>${project.build.outputDirectory}</classesDirectory>
          <redirectTestOutputToFile>true</redirectTestOutputToFile>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>docker-start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <skip>${skip.docker}</skip>
              <executable>docker-compose</executable>
              <workingDirectory>..</workingDirectory>
              <arguments>
                <argument>up</argument>
                <argument>-d</argument>
                <argument>--force-recreate</argument>
                <argument>--renew-anon-volumes</argument>
                <argument>elasticsearch</argument>
               </arguments>
            </configuration>
          </execution>
          <execution>
            <id>docker-stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <skip>${skip.docker}</skip>
              <executable>docker-compose</executable>
              <workingDirectory>..</workingDirectory>
              <arguments>
                <argument>rm</argument>
                <argument>-sfv</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>check-es-is-up</id>
            <phase>pre-integration-test</phase>
            <configuration>
              <skip>${skip.docker}</skip>
              <target name="check-es-is-up" description="Check whether ES is running">
                <echo message="Check ES is running..." />
                <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                  <socket server="localhost" port="9200" />
                </waitfor>
                <echo message="ES http socket is open. Checking for ES cluster state..." />
                <waitfor maxwait="30" maxwaitunit="second" checkevery="1" checkeveryunit="second">
                  <http url="http://localhost:9200/_cluster/state" />
                </waitfor>
                <echo message="ES is running." />
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <finalName>upgrade-optimize-from-${project.previousVersion}-to-${project.version}</finalName>
  </build>
</project>
